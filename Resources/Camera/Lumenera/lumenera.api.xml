<?xml version="1.0"?>
<doc>
    <assembly>
        <name>lumenera.api</name>
    </assembly>
    <members>
        <member name="T:Lumenera.Geometry.Point">
            <summary>
            Defines a point in 2d Euclidean geometry.
            </summary>
        </member>
        <member name="T:Lumenera.Geometry.Shape">
            <summary>
            Base type for all Lumenera.Geometry objects.
            </summary>
        </member>
        <member name="P:Lumenera.Geometry.Shape.Center">
            <summary>
            Calculate the geometric center of the shape.
            </summary>
        </member>
        <member name="M:Lumenera.Geometry.Point.#ctor">
            <summary>
            Zero argument constructor.
            </summary>
        </member>
        <member name="M:Lumenera.Geometry.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a point with given x, y coordinates.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Lumenera.Geometry.Point.#ctor(System.Double,System.Double)">
            <summary>
            Create a point with given x, y coordinates, rounded to nearest integer.
            </summary>
            <param name="x"></param>
            <param name="y"></param>  
        </member>
        <member name="M:Lumenera.Geometry.Point.#ctor(Lumenera.Geometry.Point)">
            <summary>
            Clone a point.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Lumenera.Geometry.Point.#ctor(System.Drawing.Point)">
            <summary>
            Create a Point from a System.Drawing.Point.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Lumenera.Geometry.Point.Add(Lumenera.Geometry.Point)">
            <summary>
            Add an offset to this point.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.Subtract(Lumenera.Geometry.Point)">
            <summary>
            Subtract an offset from this point.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.Add(System.Drawing.Point)">
            <summary>
            Add an offset to this point.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.Subtract(System.Drawing.Point)">
            <summary>
            Subtract an offset from this point.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.Add(Lumenera.Geometry.Size)">
            <summary>
            Add an offset to this point.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.Subtract(Lumenera.Geometry.Size)">
            <summary>
            Subtract an offset from this point.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.Add(System.Drawing.Size)">
            <summary>
            Add an offset to this point.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.Subtract(System.Drawing.Size)">
            <summary>
            Subtract an offset from this point.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.op_Addition(Lumenera.Geometry.Point,Lumenera.Geometry.Size)">
            <summary>
            Add an offset to a point.
            </summary>
            <param name="p"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.op_Subtraction(Lumenera.Geometry.Point,Lumenera.Geometry.Size)">
            <summary>
            Subtract an offset from a point.
            </summary>
            <param name="p"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.op_Addition(Lumenera.Geometry.Point,System.Drawing.Size)">
            <summary>
            Add an offset (System.Drawing.Size) to a point.
            </summary>
            <param name="p"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.op_Subtraction(Lumenera.Geometry.Point,System.Drawing.Size)">
            <summary>
            Subtract an offset (System.Drawing.Size) from a point.
            </summary>
            <param name="p"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.op_Addition(Lumenera.Geometry.Point,Lumenera.Geometry.Point)">
            <summary>
            Add two points.
            </summary>
            <param name="p"></param>
            <param name="p2"></param>
            <returns>A new Point.</returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.op_Subtraction(Lumenera.Geometry.Point,Lumenera.Geometry.Point)">
            <summary>
            Subtract two points.
            </summary>
            <param name="p"></param>
            <param name="p2"></param>
            <returns>A new Point.</returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.op_Addition(Lumenera.Geometry.Point,System.Drawing.Point)">
            <summary>
            Add a System.Drawing.Point to a Point.
            </summary>
            <param name="p"></param>
            <param name="p2"></param>
            <returns>A new Point.</returns>
            <remarks>
            Note that the object on the left hand side determines the type of the result. If the left hand side is
            a System.Drawing.Point, the System.Drawing.Point + operator will be used and the result will be a System.Drawing.Point.
            </remarks>
        </member>
        <member name="M:Lumenera.Geometry.Point.op_Subtraction(Lumenera.Geometry.Point,System.Drawing.Point)">
            <summary>
            Subtract a System.Drawing.Point from a Point.
            </summary>
            <param name="p"></param>
            <param name="p2"></param>
            <returns>A new Point.</returns>
            <remarks>
            Note that the object on the left hand side determines the type of the result. If the left hand side is
            a System.Drawing.Point, the System.Drawing.Point + operator will be used and the result will be a System.Drawing.Point.
            </remarks>
        </member>
        <member name="M:Lumenera.Geometry.Point.op_Addition(System.Drawing.Point,Lumenera.Geometry.Point)">
            <summary>
            Add a Point to a System.Drawing.Point.
            </summary>
            <param name="p"></param>
            <param name="p2"></param>
            <returns>A new Point.</returns>
            <remarks>
            Note that the object on the left hand side determines the type of the result. If the left hand side is
            a System.Drawing.Point, the System.Drawing.Point + operator will be used and the result will be a System.Drawing.Point.
            </remarks>
        </member>
        <member name="M:Lumenera.Geometry.Point.op_Subtraction(System.Drawing.Point,Lumenera.Geometry.Point)">
            <summary>
            Subtract a Point from a System.Drawing.Point.
            </summary>
            <param name="p"></param>
            <param name="p2"></param>
            <returns>A new Point.</returns>
            <remarks>
            Note that the object on the left hand side determines the type of the result. If the left hand side is
            a System.Drawing.Point, the System.Drawing.Point + operator will be used and the result will be a System.Drawing.Point.
            </remarks>
        </member>
        <member name="M:Lumenera.Geometry.Point.op_UnaryNegation(Lumenera.Geometry.Point)">
            <summary>
            Unary point negation.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.op_Multiply(Lumenera.Geometry.Point,System.Double)">
            <summary>
            Scale a point by a multiplier.
            </summary>
            <param name="p"></param>
            <param name="multiplier"></param>
            <returns>A new Point.</returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.op_Multiply(System.Double,Lumenera.Geometry.Point)">
            <summary>
            Scale a point by a multiplier.
            </summary>
            <param name="p"></param>
            <param name="multiplier"></param>
            <returns>A new Point.</returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.op_Division(Lumenera.Geometry.Point,System.Double)">
            <summary>
            Scale a point by a divisor.
            </summary>
            <param name="p"></param>
            <param name="divisor"></param>
            <returns>A new Point.</returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.op_Equality(Lumenera.Geometry.Point,Lumenera.Geometry.Point)">
            <summary>
            Compare two objects, as if by value.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.op_Inequality(Lumenera.Geometry.Point,Lumenera.Geometry.Point)">
            <summary>
            Compare two objects, as if by value.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.op_Implicit(Lumenera.Geometry.Point)~Lumenera.Geometry.Size">
            <summary>
            Implicitly convert a Size to a Point so it can be used in a context where a Point is required.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.op_Implicit(Lumenera.Geometry.Point)~System.Drawing.Point">
            <summary>
            Implicitly convert a Point to a System.Drawing.Point so it can be passed transparently to System.Drawing functions.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.ToString">
            <summary>
            Format a user readable string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.Equals(System.Object)">
            <summary>
            Compare this object with another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.GetHashCode">
            <summary>
            Calculate a hash value for this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.CompareCoordinates(Lumenera.Geometry.Point,Lumenera.Geometry.Point)">
            <summary>
            For use with comparision delegates (e.g. List&lt;&gt;.Sort().
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.CompareTo(System.Object)">
            <summary>
            Default comparison for this type is by coordinates.
            </summary>
            <remarks>Implements IComparable in a way that also satisfies IComparable&lt;&gt; requirement of System.Collections.Generic functions like Sort().</remarks>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Point.Distance(Lumenera.Geometry.Point)">
            <summary>
            Calculate the distance between two points.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="P:Lumenera.Geometry.Point.Zero">
            <summary>
            A typical origin for a Rectangle.
            </summary>
        </member>
        <member name="P:Lumenera.Geometry.Point.X">
            <summary>
            The x coodinate of the top left corner.
            </summary>
        </member>
        <member name="P:Lumenera.Geometry.Point.Y">
            <summary>
            The y coordinate of the top left corner.
            </summary>
        </member>
        <member name="P:Lumenera.Geometry.Point.Center">
            <summary>
            Calculate the geometric center of the shape.
            </summary>
        </member>
        <member name="T:Lumenera.BayerColor">
            <summary>
            The color of a source pixel in a raw bayer pattern image
            </summary>
            <remarks>
            An XML serializable color object (System.Drawing.Color wouldn't serialize).
            </remarks>
        </member>
        <member name="F:Lumenera.BayerColor.Mono">
            <summary>
            Monochrome image (not a Bayer pattern image).
            </summary>
        </member>
        <member name="F:Lumenera.BayerColor.Red">
            <summary>
            Red.
            </summary>
        </member>
        <member name="F:Lumenera.BayerColor.Blue">
            <summary>
            Blue.
            </summary>
        </member>
        <member name="F:Lumenera.BayerColor.Green">
            <summary>
            Green (either one of the two greens).
            </summary>
        </member>
        <member name="F:Lumenera.BayerColor.Green1">
            <summary>
            Green on the same line Red.
            </summary>
        </member>
        <member name="F:Lumenera.BayerColor.Green2">
            <summary>
            Green on the same line as Blue.
            </summary>
        </member>
        <member name="T:Lumenera.BayerPatternType">
            <summary>
            Unknown is not 0 so uninitilized properties must be explicitly initialized.
            </summary>
            <remarks>Note: values are compatible with USB API.</remarks>
        </member>
        <member name="F:Lumenera.BayerPatternType.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:Lumenera.BayerPatternType.Mono">
            <summary>
            Monochrom (not a Bayer pattern image).
            </summary>
        </member>
        <member name="F:Lumenera.BayerPatternType.RGGB">
            <summary>
            RGGB (top left, top right, bottom left, bottom right).
            </summary>
        </member>
        <member name="F:Lumenera.BayerPatternType.GRBG">
            <summary>
            GRBG(top left, top right, bottom left, bottom right).
            </summary>
        </member>
        <member name="F:Lumenera.BayerPatternType.GBRG">
            <summary>
            GBRG(top left, top right, bottom left, bottom right).
            </summary>
        </member>
        <member name="F:Lumenera.BayerPatternType.BGGR">
            <summary>
            BGGR(top left, top right, bottom left, bottom right).
            </summary>
        </member>
        <member name="T:Lumenera.ImageOrientation">
            <summary>
            Orientation of image data.
            </summary>
        </member>
        <member name="F:Lumenera.ImageOrientation.TopLeftFirst">
            <summary>
            First byte is top left corner of displayed image.
            </summary>
        </member>
        <member name="F:Lumenera.ImageOrientation.BottomLeftFirst">
            <summary>
            First byte is the bottom left corner of displayed image.
            </summary>
        </member>
        <member name="T:Lumenera.Range`1">
            <summary>
            Type to store the span (range) of a set of values.
            This is a value type (struct) because it is small and because it makes it easy for us to compare ranges.
            Note that all ranges are inclusive of their endpoints.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Lumenera.Range`1.Min">
            <summary>
            Minimum of range.
            </summary>
        </member>
        <member name="F:Lumenera.Range`1.Max">
            <summary>
            Maximum of range.
            </summary>
        </member>
        <member name="F:Lumenera.Range`1.Empty">
            <summary>
            An unspecified range (a range of [0,0]).
            </summary>
        </member>
        <member name="M:Lumenera.Range`1.#ctor(`0,`0)">
            <summary>
            Create a range with the specified minimum and maximum values.
            </summary>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
        </member>
        <member name="M:Lumenera.Range`1.#ctor(`0)">
            <summary>
            A degenerate case where the range collapses to an exact value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Lumenera.Range`1.ToString">
            <summary>
            Format the range as a string.
            Note that the range is inclusive so the textual representation of the range uses square brackets (per https://en.wikipedia.org/wiki/ISO_31-11).
            </summary>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:Lumenera.Range`1.ToString(System.String)">
            <summary>
            Format the range as a string.
            </summary>
            <param name="format">A format specifier valid for the numerical type. Intended for floating point types to control the number of decimal places printed.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="T:Lumenera.Geometry.Margin">
            <summary>
            Defines the margin/border relative to rectangular objects.
            </summary>
        </member>
        <member name="M:Lumenera.Geometry.Margin.#ctor">
            <summary>
            Zero argument constructor.
            </summary>
        </member>
        <member name="M:Lumenera.Geometry.Margin.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a Margin object intializing all 4 fields explicitly.
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:Lumenera.Geometry.Margin.#ctor(System.Int32)">
            <summary>
            Create a Margin object initialized all 4 fields with the same value.
            </summary>
            <param name="all"></param>
        </member>
        <member name="M:Lumenera.Geometry.Margin.#ctor(System.Windows.Forms.Padding)">
            <summary>
            Create a Margin object from a Windows Padding object.
            </summary>
            <param name="pad">Windows Padding object.</param>
        </member>
        <member name="M:Lumenera.Geometry.Margin.op_Equality(Lumenera.Geometry.Margin,Lumenera.Geometry.Margin)">
            <summary>
            Compare two objects by value.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Margin.op_Inequality(Lumenera.Geometry.Margin,Lumenera.Geometry.Margin)">
            <summary>
            Compare two objects by value.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Margin.Equals(System.Object)">
            <summary>
            Compare this object with another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Margin.GetHashCode">
            <summary>
            Calculate a hash value for this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Lumenera.Geometry.Margin.Left">
            <summary>
            The left margin.
            </summary>
        </member>
        <member name="P:Lumenera.Geometry.Margin.Top">
            <summary>
            The top margin.
            </summary>
        </member>
        <member name="P:Lumenera.Geometry.Margin.Right">
            <summary>
            The right margin.
            </summary>
        </member>
        <member name="P:Lumenera.Geometry.Margin.Bottom">
            <summary>
            The bottom margin.
            </summary>
        </member>
        <member name="P:Lumenera.Geometry.Margin.Horizontal">
            <summary>
            The total horizontal margin (left and right).
            </summary>
        </member>
        <member name="P:Lumenera.Geometry.Margin.Vertical">
            <summary>
            The total vertical margin (top and bottom).
            </summary>
        </member>
        <member name="P:Lumenera.Geometry.Margin.Size">
            <summary>
            The total margin.
            </summary>
        </member>
        <member name="T:Lumenera.USB.dll">
            <summary>
            lucamapi.dll interface class.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamImageFormatSize">
            <summary>
            Can't use sizeof() on LucamImageFormat in C# so use this constant instead to initialize LucamImageFormat.size.
            Also, a struct can't have a parameterless constructor that just initializes the size and there are too many fields for a do-all constructor.
            </summary>
        </member>
        <member name="M:Lumenera.USB.dll.LucamCameraOpen(System.Int32)">
            <summary>
            Open a camera.
            </summary>
            <remarks>  
            For LucamExternalInterface.USB2, it forces a reenumeration. 
            So, in that case, it isn't possible to reliably open a specific camera by index.
            Instead, use LucamExternalInterface.USB3 which will also enumerate USB2 devices.
            </remarks>
            <param name="n">The camera number. This is a number from 1 to the number of connected cameras.</param>
            <returns>Camera handle to be used in subsequent API calls that perform operations on this specific camera.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamEnumCameras(Lumenera.USB.dll.LucamVersion[],System.Int32)">
            <summary>
            Enumerate the list of connected cameras.
            </summary>
            <remarks>
            Returns the device enumeration determined by <see cref="M:Lumenera.USB.dll.LucamNumCameras"/>(). If LucamNumCameras() hasn't been called,
            it will be called internally.
            </remarks>
            <param name="v">An array of <see cref="T:Lumenera.USB.dll.LucamVersion"/> structures, one for each connected camera. The caller must allocate
            the array of sufficient dimensions to accommodate the number of connected cameras. This means in practice that the caller must
            determine the number of cameras first.</param>
            <param name="count">The number of entries available in 'v'.</param>
            <returns>
            The number of connected cameras.
            </returns>
            <example>
            A typical C# usage is: 
            <code lang="C#"><![CDATA[int n = dll.LucamNumCameras();
            dll.LucamVersion[] v = new dll.LucamVersion[n];
            int n2 = dll.LucamEnumCameras(v, n);]]></code>
            </example>
        </member>
        <member name="M:Lumenera.USB.dll.LucamGetLastError">
            <summary>
            Query the error code for the last API error (not camera specific - for camera specific error, see <see cref="M:Lumenera.USB.dll.LucamGetLastErrorForCamera(System.IntPtr)"/>().
            </summary>        
            <returns>
            The error code.
            </returns>
            <seealso cref="M:Lumenera.USB.dll.LucamGetLastErrorForCamera(System.IntPtr)">Camera specific error function - important if your application connects to more than one camera at a time.</seealso>
        </member>
        <member name="M:Lumenera.USB.dll.LucamNumCameras">
            <summary>
            Query the number of connected cameras.
            </summary>
            <remarks>Performs the actual device enumeration.</remarks>
            <returns>The number of cameras.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamSelectExternInterface(Lumenera.USB.dll.LucamExternalInterface)">
            <summary>
            Select which physical interface API will operate on.
            </summary>
            <remarks>USB1, USB2 and USB3 all enumerate all version of USB devices.</remarks>
            <param name="externInterface">Interface to use</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamAddRgbPreviewCallback(System.IntPtr,Lumenera.USB.dll.LucamRgbPreviewCallback,System.IntPtr,Lumenera.USB.dll.LucamPixelFormat)">
            <summary>
            Register an RGB frame event callback.
            The callback will be called for each frame received from the camera.
            If called after the stream is started the pixel format must match LucamQueryRgbPreviewPixelFormat().
            If called before then it can be any format that is valid for the current pixel depth of the camera.
            If the requested pixel format is not the default value there may be a data copy (minor performance cost).
            Note that the image buffer is upside down and that the color values are in BGR order.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="cb">Callback function.</param>
            <param name="context">Unique identifier passed to the callback function.</param>
            <param name="rgbPixelFormat">Pixel format.</param>
            <returns>Callback ID (for later removal of the callback - see LucamRemoveRgbPreviewCallback()). On error returns -1.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamAddSnapshotCallback(System.IntPtr,Lumenera.USB.dll.LucamStreamingCallback,System.IntPtr)">
            <summary>
            Register a raw snapshot frame event callback.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="cb">Callback function.</param>
            <param name="context">Unique identifier passed to the callback function.</param>
            <returns>Callback ID (for later removal of the callback - see LucamRemoveSnapshotCallback()). On error returns -1.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamAddStreamingCallback(System.IntPtr,Lumenera.USB.dll.LucamStreamingCallback,System.IntPtr)">
            <summary>
            Register a raw stream video frame event callback.
            The callback will be called for each frame received from the camera.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="cb">Callback function.</param>
            <param name="context">Unique identifier passed to the callback function.</param>
            <returns>Callback ID (for later removal of the callback - see LucamRemoveRgbPreviewCallback()). On error returns -1.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamAdjustDisplayWindow(System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adjust the display window created by LucamCreateDisplayWindow().
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="title">Window title.</param>
            <param name="x">x offset (pan) of leftmost displayed pixel.</param>
            <param name="y">y offset (pan) of topmost displayed pixel.</param>
            <param name="width">Number of pixels to display in the window (zoom).</param>
            <param name="height">Number of pixels to display in the window (zoom).</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamAdjustWhiteBalanceFromSnapshot(System.IntPtr,Lumenera.USB.dll.LucamSnapshot@,System.Byte[],System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adjust color gains based on a captured image and specified parameters.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="settings">Snapshot (still) image settings.</param>
            <param name="data">Image buffer.</param>
            <param name="redOverGreen">Whitebalance red ratio.</param>
            <param name="blueOverGreen">Whitebalance blue ratio.</param>
            <param name="x">Region of interest for whitebalance calculation.</param>
            <param name="y">Region of interest for whitebalance calculation.</param>
            <param name="width">Region of interest for whitebalance calculation.</param>
            <param name="height">Region of interest for whitebalance calculation.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamAutoFocusStart(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,Lumenera.USB.dll.LucamProgressCallback,System.IntPtr)">
            <summary>
            Start an auto focus operation for an ROI.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="x">ROI x offset</param>
            <param name="y">ROI y offset</param>
            <param name="width">ROI width</param>
            <param name="height">ROI height</param>
            <param name="putZeroThere1"></param>
            <param name="putZeroThere2"></param>
            <param name="putZeroThere3"></param>
            <param name="cb">Callback function to receive progress updates.</param>
            <param name="context">Unique identifier passed to the callback function.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamAutoFocusWait(System.IntPtr,System.Int32)">
            <summary>
            Wait for the auto focus operation to finish.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="timeout">How long to wait.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamAutoFocusStop(System.IntPtr)">
            <summary>
            Stop an auto focus operation.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamAutoFocusQueryProgress(System.IntPtr,System.Single@)">
            <summary>
            Query the progress of an auto focus operation.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="percentageCompleted"></param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamBuildHighResImageEx(System.IntPtr,Lumenera.USB.dll.LucamFrameFormat@,System.IntPtr,Lumenera.USB.dll.LucamDeltaPixMode,System.Int32)">
            <summary>
            Build a high resolution RGB image.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="format">A frame format structure as returned by LucamGetFormat().</param>
            <param name="buffer">Image buffer (output). This buffer must be big enough for the high res image (24bpp).</param>
            <param name="dp">Converion mode. Note that this determines the output image resolution.</param>
            <param name="unused"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamBuildHighResImageEx(System.IntPtr,Lumenera.USB.dll.LucamFrameFormat@,System.Byte[],Lumenera.USB.dll.LucamDeltaPixMode,System.Int32)">
            <summary>
            Build a high resolution RGB image.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="format">A frame format structure as returned by LucamGetFormat().</param>
            <param name="buffer">Image buffer (output). This buffer must be big enough for the high res image (24bpp).</param>
            <param name="dp">Converion mode. Note that this determines the output image resolution.</param>
            <param name="unused"></param>
            <returns></returns>  
        </member>
        <member name="M:Lumenera.USB.dll.LucamCameraClose(System.IntPtr)">
            <summary>
            Close the specified camera.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamCameraReset(System.IntPtr)">
            <summary>
            Reset the specified camera to power up configuration.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <returns>False if there is an error (or if the camera needs to be unplugged to full reset).</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertFrameToRgb24(System.IntPtr,System.Byte[],System.Byte[],System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion@)">
            <summary>
            Convert an 8-bit raw frame to RGB format.
            The first pixel in the output will be the bottom left pixel in the image.
            The color values are in BGR order.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">RGB data byte array. Must be big enough to store the RGB 24 image (width * height * 3).</param>
            <param name="src">Raw data byte array. Must be big enough to store the raw data frame (width * height * bytes per pixel (for the selected pixel format)).</param>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertFrameToRgb24(System.IntPtr,System.Byte[],System.UInt16[],System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion@)">
            <summary>
            Convert an 8-bit raw frame to RGB format.
            The first pixel in the output will be the bottom left pixel in the image.
            The color values are in BGR order.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">RGB data byte array. Must be big enough to store the RGB 24 image (width * height * 3).</param>
            <param name="src">Raw data ushort array. Must be big enough to store the raw data frame (width * height * bytes per pixel (for the selected pixel format)).</param>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertFrameToRgb24(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion@)">
            <summary>
            Convert an 8-bit raw frame to RGB format.
            The first pixel in the output will be the bottom left pixel in the image.
            The color values are in BGR order.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">RGB data buffer IntPtr. Must be big enough to store the RGB 24 image (width * height * 3).</param>
            <param name="src">Raw data buffer IntPtr. Must be big enough to store the raw data frame (width * height * bytes per pixel (for the selected pixel format)).</param>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertFrameToRgb24Ex(System.IntPtr,System.Byte[],System.Byte[],Lumenera.USB.dll.LucamImageFormat@,Lumenera.USB.dll.LucamConversionParams@)">
            <summary>
            Convert an 8-bit raw frame to RGB format.
            The first pixel in the output will be the bottom left pixel in the image.
            The color values are in BGR order.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">RGB data byte array. Must be big enough to store the RGB 24 image (width * height * 3).</param>
            <param name="src">Raw data byte array. Must be big enough to store the raw data frame (width * height * bytes per pixel (for the selected pixel format)).</param>
            <param name="ifmt">LucamImageFormat describing the raw image format.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertFrameToRgb24Ex(System.IntPtr,System.IntPtr,System.IntPtr,Lumenera.USB.dll.LucamImageFormat@,Lumenera.USB.dll.LucamConversionParams@)">
            <summary>
            Convert an 8-bit raw frame to RGB format.
            The first pixel in the output will be the bottom left pixel in the image.
            The color values are in BGR order.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">RGB data buffer IntPtr. Must be big enough to store the RGB 24 image (width * height * 3).</param>
            <param name="src">Raw data buffer IntPtr. Must be big enough to store the raw data frame (width * height * bytes per pixel (for the selected pixel format)).</param>
            <param name="ifmt">LucamImageFormat describing the raw image format.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertFrameToRgb32(System.IntPtr,System.Byte[],System.Byte[],System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion@)">
            <summary>
            Convert an 8-bit raw frame to RGB format.
            The first pixel in the output will be the bottom left pixel in the image.
            The color values are in BGR order.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">RGB data byte array. Must be big enough to store the RGB 24 image (width * height * 3).</param>
            <param name="src">Raw data byte array. Must be big enough to store the raw data frame (width * height * bytes per pixel (for the selected pixel format)).</param>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertFrameToRgb32(System.IntPtr,System.Byte[],System.UInt16[],System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion@)">
            <summary>
            Convert an 8-bit raw frame to RGB format.
            The first pixel in the output will be the bottom left pixel in the image.
            The color values are in BGR order.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">RGB data byte array. Must be big enough to store the RGB 24 image (width * height * 3).</param>
            <param name="src">Raw data ushort array. Must be big enough to store the raw data frame (width * height * bytes per pixel (for the selected pixel format)).</param>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertFrameToRgb32(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion@)">
            <summary>
            Convert an 8-bit raw frame to RGB format.
            The first pixel in the output will be the bottom left pixel in the image.
            The color values are in BGR order.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">RGB data buffer IntPtr. Must be big enough to store the RGB 24 image (width * height * 3).</param>
            <param name="src">Raw data buffer IntPtr. Must be big enough to store the raw data frame (width * height * bytes per pixel (for the selected pixel format)).</param>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertFrameToRgb32Ex(System.IntPtr,System.Byte[],System.Byte[],Lumenera.USB.dll.LucamImageFormat@,Lumenera.USB.dll.LucamConversionParams@)">
            <summary>
            Convert an 8-bit raw frame to RGB format.
            The first pixel in the output will be the bottom left pixel in the image.
            The color values are in BGR order.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">RGB data byte array. Must be big enough to store the RGB 24 image (width * height * 3).</param>
            <param name="src">Raw data byte array. Must be big enough to store the raw data frame (width * height * bytes per pixel (for the selected pixel format)).</param>
            <param name="ifmt">LucamImageFormat describing the raw image format.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertFrameToRgb32Ex(System.IntPtr,System.IntPtr,System.IntPtr,Lumenera.USB.dll.LucamImageFormat@,Lumenera.USB.dll.LucamConversionParams@)">
            <summary>
            Convert an 8-bit raw frame to RGB format.
            The first pixel in the output will be the bottom left pixel in the image.
            The color values are in BGR order.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">RGB data buffer IntPtr. Must be big enough to store the RGB 24 image (width * height * 3).</param>
            <param name="src">Raw data buffer IntPtr. Must be big enough to store the raw data frame (width * height * bytes per pixel (for the selected pixel format)).</param>
            <param name="ifmt">LucamImageFormat describing the raw image format.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertFrameToRgb48(System.IntPtr,System.Byte[],System.Byte[],System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion@)">
            <summary>
            Convert a 16-bit raw frame to RGB format.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">RGB data byte array. Must be big enough to store the RGB 48 image (width * height * 6).</param>
            <param name="src">Raw data byte array. Must be big enough to store the raw data frame (width * height * bytes per pixel (for the selected pixel format)).</param>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertFrameToRgb48(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion@)">
            <summary>
            Convert a 16-bit raw frame to RGB format.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">RGB data buffer IntPtr. Must be big enough to store the RGB 48 image (width * height * 6).</param>
            <param name="src">Raw data buffer IntPtr. Must be big enough to store the raw data frame (width * height * bytes per pixel (for the selected pixel format)).</param>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertFrameToRgb48Ex(System.IntPtr,System.Byte[],System.Byte[],Lumenera.USB.dll.LucamImageFormat@,Lumenera.USB.dll.LucamConversionParams@)">
            <summary>
            Convert a 16-bit raw frame to RGB format.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">RGB data byte array. Must be big enough to store the RGB 48 image (width * height * 6).</param>
            <param name="src">Raw data byte array. Must be big enough to store the raw data frame (width * height * bytes per pixel (for the selected pixel format)).</param>
            <param name="ifmt">LucamImageFormat describing the raw image format.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertFrameToRgb48Ex(System.IntPtr,System.IntPtr,System.IntPtr,Lumenera.USB.dll.LucamImageFormat@,Lumenera.USB.dll.LucamConversionParams@)">
            <summary>
            Convert a 16-bit raw frame to RGB format.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">RGB data buffer IntPtr. Must be big enough to store the RGB 48 image (width * height * 6).</param>
            <param name="src">Raw data buffer IntPtr. Must be big enough to store the raw data frame (width * height * bytes per pixel (for the selected pixel format)).</param>
            <param name="ifmt">LucamImageFormat describing the raw image format.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertFrameToGreyscale8(System.IntPtr,System.Byte[],System.Byte[],System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion@)">
            <summary>
            Convert a raw frame to monochrome greyscale format.
            The first pixel in the output will be the top left pixel in the image
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">Monochrome data. Must be big enough to store the greyscale 8-bit image (width * height).</param>
            <param name="src">Raw data source for the specified pixel format.</param>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertFrameToGreyscale8(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion@)">
            <summary>
            Convert a raw frame to monochrome greyscale format.
            The first pixel in the output will be the top left pixel in the image
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">Monochrome data. Must be big enough to store the greyscale 8-bit image (width * height).</param>
            <param name="src">Raw data source for the specified pixel format.</param>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertFrameToGreyscale8Ex(System.IntPtr,System.Byte[],System.Byte[],Lumenera.USB.dll.LucamImageFormat@,Lumenera.USB.dll.LucamConversionParams@)">
            <summary>
            Convert a raw frame to monochrome greyscale format.
            The first pixel in the output will be the top left pixel in the image
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">Monochrome data. Must be big enough to store the greyscale 8-bit image (width * height).</param>
            <param name="src">Raw data source for the specified pixel format.</param>
            <param name="ifmt">LucamImageFormat describing the raw image format.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertFrameToGreyscale8Ex(System.IntPtr,System.IntPtr,System.IntPtr,Lumenera.USB.dll.LucamImageFormat@,Lumenera.USB.dll.LucamConversionParams@)">
            <summary>
            Convert a raw frame to monochrome greyscale format.
            The first pixel in the output will be the top left pixel in the image
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">Monochrome data. Must be big enough to store the greyscale 8-bit image (width * height).</param>
            <param name="src">Raw data source for the specified pixel format.</param>
            <param name="ifmt">LucamImageFormat describing the raw image format.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertFrameToGreyscale16(System.IntPtr,System.Byte[],System.Byte[],System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion@)">
            <summary>
            Convert a raw frame to monochrome greyscale format.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">Monochrome data. Must be big enough to store the greyscale 16-bit image (width * height).</param>
            <param name="src">Raw data source for the specified pixel format.</param>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertFrameToGreyscale16(System.IntPtr,System.UInt16[],System.UInt16[],System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion@)">
            <summary>
            Convert a raw frame to monochrome greyscale format.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">Monochrome data. Must be big enough to store the greyscale 16-bit image (width * height).</param>
            <param name="src">Raw data source for the specified pixel format.</param>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertFrameToGreyscale16(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion@)">
            <summary>
            Convert a raw frame to monochrome greyscale format.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">Monochrome data. Must be big enough to store the greyscale 16-bit image (width * height).</param>
            <param name="src">Raw data source for the specified pixel format.</param>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertFrameToGreyscale16Ex(System.IntPtr,System.Byte[],System.Byte[],Lumenera.USB.dll.LucamImageFormat@,Lumenera.USB.dll.LucamConversionParams@)">
            <summary>
            Convert a raw frame to monochrome greyscale format.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">Monochrome data. Must be big enough to store the greyscale 16-bit image (width * height).</param>
            <param name="src">Raw data source for the specified pixel format.</param>
            <param name="ifmt">LucamImageFormat describing the raw image format.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertFrameToGreyscale16Ex(System.IntPtr,System.UInt16[],System.UInt16[],Lumenera.USB.dll.LucamImageFormat@,Lumenera.USB.dll.LucamConversionParams@)">
            <summary>
            Convert a raw frame to monochrome greyscale format.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">Monochrome data. Must be big enough to store the greyscale 16-bit image (width * height).</param>
            <param name="src">Raw data source for the specified pixel format.</param>
            <param name="ifmt">LucamImageFormat describing the raw image format.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertFrameToGreyscale16Ex(System.IntPtr,System.IntPtr,System.IntPtr,Lumenera.USB.dll.LucamImageFormat@,Lumenera.USB.dll.LucamConversionParams@)">
            <summary>
            Convert a raw frame to monochrome greyscale format.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">Monochrome data. Must be big enough to store the greyscale 16-bit image (width * height).</param>
            <param name="src">Raw data source for the specified pixel format.</param>
            <param name="ifmt">LucamImageFormat describing the raw image format.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConvertRawAVIToStdVideo(System.IntPtr,System.String,System.String,Lumenera.USB.dll.LucamAviFileType)">
            <summary>
            Convert an AVI file to another format.
            </summary>
            <param name="hCamera">Camera Handle</param>
            <param name="outputFileName">Output file.</param>
            <param name="inputFileName">Input file.</param>
            <param name="outputType">Type to convert to.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamCreateDisplayWindow(System.IntPtr,System.String,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a display window.
            The window is managed by the API.
            It can be destroyed by calling LucamDestroyDisplayWindow().
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="title">Window title.</param>
            <param name="dwStyle">Window style.</param>
            <param name="x">x offset (pan) of leftmost displayed pixel.</param>
            <param name="y">y offset (pan) of topmost displayed pixel.</param>
            <param name="width">Number of pixels to display in the window (zoom).</param>
            <param name="height">Number of pixels to display in the window (zoom).</param>
            <param name="parentId">Parent window ID.</param>
            <param name="childId">Child menu ID.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamDestroyDisplayWindow(System.IntPtr)">
            <summary>
            Destroys the display window created by LucamCreateDisplayWindow().
            </summary>
            <param name="hCamera">Camera handle.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamDigitalWhiteBalance(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform whitebalance with digital gains.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="x">x offset of region of interest</param>
            <param name="y">y offset of region of interest</param>
            <param name="width">width of region of interest</param>
            <param name="height">height of region of interest</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamDigitalWhiteBalanceEx(System.IntPtr,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform whitebalance with digital gains.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="redOverGreen">The red/green color ratio to target.</param>
            <param name="blueOverGreen">The blue/green color ration to target.</param>
            <param name="x">x offset of region of interest</param>
            <param name="y">y offset of region of interest</param>
            <param name="width">width of region of interest</param>
            <param name="height">height of region of interest</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamDisableFastFrames(System.IntPtr)">
            <summary>
            Take the camera out of snapshot mode.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamDisplayPropertyPage(System.IntPtr,System.Int32)">
            <summary>
            Display DirectX Property page
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="parentWnd">Window handle of parent window.</param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamDisplayVideoFormatPage(System.IntPtr,System.Int32)">
            <summary>
            Display DirectX Video Format page
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="parentWnd">Window handle of parent window.</param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamEnableFastFrames(System.IntPtr,Lumenera.USB.dll.LucamSnapshot@)">
            <summary>
            Put the camera in snapshot mode.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="settings">Snapshot (still) image settings.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamEnumAvailableFrameRates(System.IntPtr,System.Int32,System.Single[])">
            <summary>
            Enumerate the available frame rates for current camera format (As set via LucamSetFormat()).
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="count">Size of the availableframerates array (if zero the function will just return the number of available framerates).</param>
            <param name="availableframerates">An array of floats (framerate list output).</param>
            <returns>The number of available framerates (or 0 on error).</returns>
            <example>Typical C# usage:
                int n = LucamEnumAvailableFrameRates(h, 0, 0);
                float[] fr = new float[n];
                n = LucamEnumAvailableFrameRates(h, n, fr);
            </example>
        </member>
        <member name="M:Lumenera.USB.dll.LucamEnumAvailableFrameRates(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Enumerate the available frame rates for current camera format (As set via LucamSetFormat()).
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="count">Size of the availableframerates array (if zero the function will just return the number of available framerates).</param>
            <param name="availableframerates">IntPtr to an array of floats (or 0 if calling with a count of 0 just to get the number of available framerates).</param>
            <returns>The number of available framerates (or 0 on error).</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamGetCameraId(System.IntPtr,System.Int32@)">
            <summary>
            Get the USB camera device ID.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="id">Device ID (output).</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamGetCurrentMatrix(System.IntPtr,System.Single[])">
            <summary>
            Read the values of the current color correction matrix.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="matrix">The 3x3 array of color correction matrix values.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamGetFormat(System.IntPtr,Lumenera.USB.dll.LucamFrameFormat@,System.Single@)">
            <summary>
            Get the camera frame format (framerate, subwindow, subsample/binning).
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="format">Frame format (output).</param>
            <param name="frameRate">Framerate (output).</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamGetImageIntensity(System.IntPtr,System.Byte[],Lumenera.USB.dll.LucamImageFormat@,System.Int32,System.Int32,System.Int32,System.Int32,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Get the intensity for a region of interest in a raw image frame.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="data">Image buffer.</param>
            <param name="pImageFormat">Image format.</param>
            <param name="x">ROI x offset</param>
            <param name="y">ROI y offset</param>
            <param name="width">ROI width</param>
            <param name="height">ROI width</param>
            <param name="pIntensity">Overall intensity</param>
            <param name="pRedIntensity">Red intensity</param>
            <param name="pGreen1Intensity">Green1 intensity</param>
            <param name="pGreen2Intensity">Green2 intensity</param>
            <param name="pBlueIntensity">Blue intensity</param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamGetImageIntensity(System.IntPtr,System.IntPtr,Lumenera.USB.dll.LucamImageFormat@,System.Int32,System.Int32,System.Int32,System.Int32,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Get the intensity for a region of interest in a raw image frame.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="data">Image buffer.</param>
            <param name="pImageFormat">Image format.</param>
            <param name="x">ROI x offset</param>
            <param name="y">ROI y offset</param>
            <param name="width">ROI width</param>
            <param name="height">ROI width</param>
            <param name="pIntensity">Overall intensity</param>
            <param name="pRedIntensity">Red intensity</param>
            <param name="pGreen1Intensity">Green1 intensity</param>
            <param name="pGreen2Intensity">Green2 intensity</param>
            <param name="pBlueIntensity">Blue intensity</param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamGetLastErrorForCamera(System.IntPtr)">
            <summary>
            Get the last error for this camera.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamGetProperty(System.IntPtr,Lumenera.USB.dll.LucamProperty,System.Single@,Lumenera.USB.dll.LucamPropertyFlag@)">
            <summary>
            Retrieve camera properties
            </summary>
            <param name="hCamera">Camera Handle</param>
            <param name="property">Property</param>
            <param name="value">Property value (output)</param>
            <param name="flags">Property flags (output)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamGetTruePixelDepth(System.IntPtr,System.Int32@)">
            <summary>
            Get the actual maximum number of bits of dynamic range in raw images.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="bitCount">Pixel depth (dynamic range) (output).</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamGetVideoImageFormat(System.IntPtr,Lumenera.USB.dll.LucamImageFormat@)">
            <summary>
            Get all of the information necessary to interpret a raw video image.
            Intended to be used with the ConvertFrameTo...Ex() functions.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="imageFormat">The first element (size) of this structure must be initialized to the size of the structure prior to the call.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamGpioConfigure(System.IntPtr,System.Byte)">
            <summary>
            Configure direction of General Purpose I/O bits.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="enableOutput">Bit flags corresponding to settings for each General Purpose Output. A bit value of 1 means output.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamGpioRead(System.IntPtr,System.Byte@,System.Byte@)">
            <summary>
            Read the state of the General Purpose I/O registers.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="gpo">General Purpose Output bit values.</param>
            <param name="gpi">General Purpose Input bit values.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamGpioWrite(System.IntPtr,System.Byte)">
            <summary>
            Manually modify the state of General Purpose Outputs. Note that GPO bits must be enable to use this function via LucamGpoSelect().
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="gpo">General Purpose Outputs.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamGpoSelect(System.IntPtr,System.Byte)">
            <summary>
            Configure the alternate General Purpose Output mode.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="gpoEnable">Bit flags corresponding to settings for each General Purpose Output. A bit value of 1 means the bit can be controlled via LucamGpioWrite().</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamInitAutoLens(System.IntPtr,System.Boolean)">
            <summary>
            Initialize and calibrate the focue and iris positions of the camera lens
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="force">Force a recalibration of the lens (if True)</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamOneShotAutoExposure(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform a single exposure adjustment to reach the specified luminance target as closely as possible.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="target">Luminance target (0-255).</param>
            <param name="x">Auto exposure window x offset.</param>
            <param name="y">Auto exposure window y offset.</param>
            <param name="width">Auto exposure window width.</param>
            <param name="height">Auto exposure window height.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamOneShotAutoIris(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform a single exposure adjustment to reach the specified luminance target as closely as possible.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="target">Luminance target (0-255).</param>
            <param name="x">Auto iris window x offset.</param>
            <param name="y">Auto iris window y offset.</param>
            <param name="width">Auto iris window width.</param>
            <param name="height">Auto iris window height.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamOneShotAutoWhiteBalance(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform a single white balance adjustment to color gains.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="x">Auto white balance window x offset.</param>
            <param name="y">Auto white balance window y offset.</param>
            <param name="width">Auto white balance window width.</param>
            <param name="height">Auto white balance window height.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamOneShotAutoWhiteBalanceEx(System.IntPtr,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform a single white balance adjustment to color gains.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="redOverGreen">Ratio of red relative to green desired in result.</param>
            <param name="blueOverGreen">Ratio or blue relative to green desired in the result.</param>
            <param name="x">Auto white balance window x offset.</param>
            <param name="y">Auto white balance window y offset.</param>
            <param name="width">Auto white balance window width.</param>
            <param name="height">Auto white balance window height.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamPerformDualTapCorrection(System.IntPtr,System.Byte[],Lumenera.USB.dll.LucamImageFormat@)">
            <summary>
            Perform dual tap balancing on a raw image buffer.
            The correction is done in situ.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="data">Raw image buffer (must be the correct size for the specified image format).</param>
            <param name="ImageFormat">Image format specification (as returned by LucamGetImageForamt()).</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamPermanentBufferRead(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of data from the persistent storage area in the camera.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="data">Data buffer.</param>
            <param name="offset">Offset in camera to read from.</param>
            <param name="length">Length of data to read.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamPermanentBufferWrite(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of data to the persistent storage area in the camera.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="data">Data buffer.</param>
            <param name="offset">Offset in camera to write to.</param>
            <param name="length">Length of data to write</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamPropertyRange(System.IntPtr,Lumenera.USB.dll.LucamProperty,System.Single@,System.Single@,System.Single@,Lumenera.USB.dll.LucamPropertyFlag@)">
            <summary>
            Get the range of valid property values and the default value of the property.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="property">The property to get the range for.</param>
            <param name="min">Minimum property value (output).</param>
            <param name="max">Maximum property value (output).</param>
            <param name="def">Default property value (output). In some models it is the current property value.</param>
            <param name="pFlags"></param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamDisplayPutMessageDrain(System.IntPtr,System.Int32)">
            <summary>
            Send preview window mouse events to the application. Must be called each time display is started
            with StreamVideoStart().
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="hWnd">Window handle used in LucamStreamVideoControl() to start the preview display.</param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamDisplayPutMessageDrain(System.IntPtr,System.IntPtr)">
            <summary>
            Send preview window mouse events to the application.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="hWnd">Window handle used in LucamStreamVideoControl() to start the preview display.</param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamQueryDisplayFrameRate(System.IntPtr,System.Single@)">
            <summary>
            Returns the actual average displayed frame rate of the camera since previewing was started.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="value">The average frame rate (output).</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamQueryExternInterface(System.IntPtr,Lumenera.USB.dll.LucamExternalInterface@)">
            <summary>
            Query the camera connection type.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="value">Interface type (output).</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamQueryRgbPreviewPixelFormat(System.IntPtr,Lumenera.USB.dll.LucamPixelFormat@)">
            <summary>
            Query the pixel format associated with a registered RGB preview callback.
            </summary>
            <param name="hCamera">Camera Handle.</param>
            <param name="pf">Pixel format (output).</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamQueryVersion(System.IntPtr,Lumenera.USB.dll.LucamVersion@)">
            <summary>
            Query camera version information.
            </summary>
            <param name="hCamera">Camera Handle.</param>
            <param name="v">Version information structure (output).</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamReadRegister(System.IntPtr,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Read internal camera registers.
            </summary>
            <param name="hCamera">Camera Handle.</param>
            <param name="address">Register address</param>
            <param name="n">Number of registers to read.</param>
            <param name="values">The array to store the register values in.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamRemoveRgbPreviewCallback(System.IntPtr,System.Int32)">
            <summary>
            Deregister an RGB frame event callback.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="callbackId">Callback ID (returned by LucamAddRgbPreviewCallback()).</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamRemoveSnapshotCallback(System.IntPtr,System.Int32)">
            <summary>
            Deregister a snapshot raw frame event callback.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="callbackId">Callback ID (returned by LucamAddSnapshotCallback()).</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamRemoveStreamingCallback(System.IntPtr,System.Int32)">
            <summary>
            Deregister a steam video raw frame event callback.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="callbackId">Callback ID (returned by LucamAddStreamingPreviewCallback()).</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamSetFormat(System.IntPtr,Lumenera.USB.dll.LucamFrameFormat@,System.Single)">
            <summary>
            Get the camera frame format (framerate, subwindow, subsample/binning).
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="format">Frame format.</param>
            <param name="frameRate">Framerate.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamSetProperty(System.IntPtr,Lumenera.USB.dll.LucamProperty,System.Single,Lumenera.USB.dll.LucamPropertyFlag)">
            <summary>
            Set camera properties.
            </summary>
            <param name="hCamera">Camera Handle.</param>
            <param name="property">Property.</param>
            <param name="value">Property value.</param>
            <param name="flags">Property flags.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamSetTriggerMode(System.IntPtr,System.Boolean)">
            <summary>
            Set the snapshot trigger mode.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="useHwTrigger">True to use HW trigger.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamSetupCustomMatrix(System.IntPtr,System.Single[])">
            <summary>
            Setup a custom color corection matrix.
            </summary>
            <param name="hCamera">Camera handle</param>
            <param name="matrix">3x3 color correction matrix.</param>
            <returns>False if there is an error.</returns>   
        </member>
        <member name="M:Lumenera.USB.dll.LucamStreamVideoControl(System.IntPtr,Lumenera.USB.dll.LucamStreamMode,System.Int32)">
            <summary>
            Controls the video stream.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="controlType">Control type.</param>
            <param name="hWnd">Window handle.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamStreamVideoControl(System.IntPtr,Lumenera.USB.dll.LucamStreamMode,System.IntPtr)">
            <summary>
            Controls the video stream.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="controlType">Control type.</param>
            <param name="hWnd">Window handle.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamStreamVideoControlAVI(System.IntPtr,Lumenera.USB.dll.LucamStreamMode,System.String,System.Int32)">
            <summary>
            Controls the recording of the video stream to a file.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="controlType">Control type.</param>
            <param name="fileName">Name of file to record to.</param>
            <param name="hWnd">Window handle.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamStreamVideoControlAVI(System.IntPtr,Lumenera.USB.dll.LucamStreamMode,System.String,System.IntPtr)">
            <summary>
            Controls the recording of the video stream to a file.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="controlType">Control type.</param>
            <param name="fileName">Name of file to record to.</param>
            <param name="hWnd">Window handle.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamTakeFastFrame(System.IntPtr,System.Byte[])">
            <summary>
            Take a snapshot. Must call LucamEnableFastFrames() first.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="data">Image raw data byte array.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamTakeFastFrame(System.IntPtr,System.UInt16[])">
            <summary>
            Take a snapshot. Must call LucamEnableFastFrames() first.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="data">Image raw data ushort array.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamTakeFastFrame(System.IntPtr,System.IntPtr)">
            <summary>
            Take a snapshot. Must call LucamEnableFastFrames() first.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="pData">Image raw data buffer IntPtr.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamTakeSnapshot(System.IntPtr,Lumenera.USB.dll.LucamSnapshot@,System.Byte[])">
            <summary>
            Take a single still image using the camera's still imaging mode. If a video preview is active it will be automatically interrupted.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="settings">Snapshot (still) image settings.</param>
            <param name="data">Image raw data byte array.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamTakeSnapshot(System.IntPtr,Lumenera.USB.dll.LucamSnapshot@,System.UInt16[])">
            <summary>
            Take a single still image using the camera's still imaging mode. If a video preview is active it will be automatically interrupted.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="settings">Snapshot (still) image settings.</param>
            <param name="data">Image raw data ushort array.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamTakeSnapshot(System.IntPtr,Lumenera.USB.dll.LucamSnapshot@,System.IntPtr)">
            <summary>
            Take a single still image using the camera's still imaging mode. If a video preview is active it will be automatically interrupted.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="settings">Snapshot (still) image settings.</param>
            <param name="data">Image raw data buffer IntPtr.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamTakeVideo(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Capture a frame from the video image preview. 
            Video preview should be running (see LucamStreamVideoControl()).
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="n">The number of frames to take.</param>
            <param name="buffer">
            Raw image data buffer IntPtr (the buffer must be big enough to store the raw image for the current camera settings). 
            Use a value of IntPtr.Zero (i.e. null) to skip frames.
            </param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamTakeVideo(System.IntPtr,System.Int32,System.Byte[])">
            <summary>
            Capture a frame from the video image preview. 
            Video preview should be running (see LucamStreamVideoControl()).
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="n">The number of frames to take.</param>
            <param name="buffer">
            Raw image data buffer byte array (the buffer must be big enough to store the raw image for the current camera settings). 
            Use a value of null to skip frames.
            </param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamTakeVideo(System.IntPtr,System.Int32,System.UInt16[])">
            <summary>
            Capture a frame from the video image preview. 
            Video preview should be running (see LucamStreamVideoControl()).
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="n">The number of frames to take.</param>
            <param name="buffer">
            Raw image data buffer ushort array (the buffer must be big enough to store the raw image for the current camera settings). 
            Use a value of null to skip frames.
            </param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamTakeVideoEx(System.IntPtr,System.IntPtr,System.Int32@,System.Int32)">
            <summary>
            Capture a frame from the video image preview. 
            Video preview should be running (see LucamStreamVideoControl()).
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="buffer">Raw image data buffer IntPtr (the buffer must be big enough to store the raw image for the current camera settings).</param>
            <param name="size">Size of the data buffer</param>
            <param name="timeout">Maximum duration to wait for a frame in milliseconds.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamTakeVideoEx(System.IntPtr,System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Capture a frame from the video image preview. 
            Video preview should be running (see LucamStreamVideoControl()).
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="buffer">Raw image data byte array (the array must be big enough to store the raw image for the current camera settings).</param>
            <param name="size">Size of the data buffer</param>
            <param name="timeout">Maximum duration to wait for a frame in milliseconds.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamTakeVideoEx(System.IntPtr,System.UInt16[],System.Int32@,System.Int32)">
            <summary>
            Capture a frame from the video image preview. 
            Video preview should be running (see LucamStreamVideoControl()).
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="buffer">Raw image data ushort array (the array must be big enough to store the raw image for the current camera settings).</param>
            <param name="size">Size of the data buffer</param>
            <param name="timeout">Maximum duration to wait for a frame in milliseconds.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamTriggerFastFrame(System.IntPtr)">
            <summary>
            Trigger a snapshot capture. 
            Doesn't wait for the image to be capture.
            Call LucamTakeFastFrame() or LucamTakeFastFrameNoTrigger() to retrieve the image.
            The camera should be in fast frames mode - LucamEnableFastFrames().
            </summary>
            <param name="hCamera">Camera handle.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamWriteRegister(System.IntPtr,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Write internal camera register.
            </summary>
            <param name="hCamera">Camera Handle.</param>
            <param name="address">Register address</param>
            <param name="n">Number of registers to write.</param>
            <param name="values">The array containing the register values.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamEnableSynchronousSnapshots(System.Int32,System.IntPtr[],System.IntPtr[])">
            <summary>
            Set up synchronous snapshots.
            </summary>
            <param name="numberOfCameras">The number of cameras to synchronize.</param>
            <param name="handles">Array of camera handles.</param>
            <param name="settings">Array of LucamSnapshot struct pointers.</param>
            <returns>synchronous snapshot handle (for use with LucamTakeSyncronousSnapshots).</returns>   
        </member>
        <member name="M:Lumenera.USB.dll.LucamTakeSynchronousSnapshots(System.Int32,System.IntPtr[])">
            <summary>
            Take synchronous snapshots.
            </summary>
            <param name="syncSnapshotHandle">Synchronous snapshot handle (from EnableSyncSnapshots).</param>
            <param name="buffers">Array of raw image buffer pointers for the snapshot images. These buffers must correspond in size to the LucamFrameFormat for that camera.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamDisableSynchronousSnapshots(System.Int32)">
            <summary>
            Release the synchronous snapshot handle.
            </summary>
            <param name="syncSnapshotHandle">Synchronous snapshot handle (from EnableSyncSnapshots).</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamPreviewAVIOpen(System.String)">
            <summary>
            Open an AVI file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>A handle for subsequent LucamPreviewAVIxxx() calls.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamPreviewAVIClose(System.IntPtr)">
            <summary>
            Close a previously opened AVI File.
            </summary>
            <param name="handle">AVI handle returned by LucmPreviewAVIOpen().</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamPreviewAVIControl(System.IntPtr,Lumenera.USB.dll.LucamAviStreamMode,System.Int32)">
            <summary>
            Control AVI playback.
            </summary>
            <param name="handle">AVI handle returned by LucmPreviewAVIOpen().</param>
            <param name="controlType">Streaming option.</param>
            <param name="hWnd">Window handle when starting playback.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamPreviewAVIControl(System.IntPtr,Lumenera.USB.dll.LucamAviStreamMode,System.IntPtr)">
            <summary>
            Control AVI playback.
            </summary>
            <param name="handle">AVI handle returned by LucmPreviewAVIOpen().</param>
            <param name="controlType">Streaming option.</param>
            <param name="hWnd">Window handle when starting playback.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamPreviewAVIGetDuration(System.IntPtr,System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
            <summary>
            Get the duration of the AVI file.
            </summary>
            <param name="handle">AVI handle returned by LucmPreviewAVIOpen().</param>
            <param name="minutes">Time in minutes.</param>
            <param name="seconds">Time in seconds.</param>
            <param name="milliSeconds">Time in milliseconds.</param>
            <param name="microSeconds">Time in microseconds.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamPreviewAVIGetFrameCount(System.IntPtr,System.Int64@)">
            <summary>
            Get the frame count of the AVI file.
            </summary>
            <param name="handle">AVI handle returned by LucmPreviewAVIOpen().</param>
            <param name="frameCount">The number of frames in the AVI file.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamPreviewAVIGetFrameRate(System.IntPtr,System.Single@)">
            <summary>
            Get the frame rate of the AVI file.
            </summary>
            <param name="handle">AVI handle returned by LucmPreviewAVIOpen().</param>
            <param name="frameRate">The frame rate of the AVI file.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamPreviewAVIGetPositionTime(System.IntPtr,System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
            <summary>
            Get the current position as a time.
            </summary>
            <param name="handle">AVI handle returned by LucmPreviewAVIOpen().</param>
            <param name="minutes">Time in minutes.</param>
            <param name="seconds">Time in seconds.</param>
            <param name="milliSeconds">Time in milliseconds.</param>
            <param name="microSeconds">Time in microseconds.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamPreviewAVIGetPositionFrame(System.IntPtr,System.Int64@)">
            <summary>
            Get the current position as a frame number.
            </summary>
            <param name="handle">AVI handle returned by LucmPreviewAVIOpen().</param>
            <param name="positionCurrentFrame">The current frame number.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamPreviewAVISetPositionTime(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Set the current position by time.
            </summary>
            <param name="handle">AVI handle returned by LucmPreviewAVIOpen().</param>
            <param name="minutes">Time in minutes.</param>
            <param name="seconds">Time in seconds.</param>
            <param name="milliSeconds">Time in milliseconds.</param>
            <param name="microSeconds">Time in microseconds.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamPreviewAVISetPositionFrame(System.IntPtr,System.Int64)">
            <summary>
            Set the current position by frame number.
            </summary>
            <param name="handle">AVI handle returned by LucmPreviewAVIOpen().</param>
            <param name="frame">The desired frame number.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamPreviewAVIGetFormat(System.IntPtr,System.Int32@,System.Int32@,Lumenera.USB.dll.LucamAviFileType@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="handle">AVI handle returned by LucmPreviewAVIOpen().</param>
            <param name="width">Width of the image.</param>
            <param name="height">Height of the image.</param>
            <param name="fileType">Type of image.</param>
            <param name="bitDepth">Bit depth of the image.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamSaveImage(System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,System.Byte[],System.String)">
            <summary>
            Save an image to disk in the format according to the filename parameter's file extension (.jpg, .bmp, .tif, .raw).
            </summary>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="data">Image data byte array (the array must be big enough to store the raw image for the current camera settings).</param>
            <param name="filename">The filename to save the image to.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamSaveImage(System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,System.UInt16[],System.String)">
            <summary>
            Save an image to disk in the format according to the filename parameter's file extension (.jpg, .bmp, .tif, .raw).
            </summary>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="data">Image data ushort array (the array must be big enough to store the raw image for the current camera settings).</param>
            <param name="filename">The filename to save the image to.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamSaveImage(System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,System.IntPtr,System.String)">
            <summary>
            Save an image to disk in the format according to the filename parameter's file extension (.jpg, .bmp, .tif, .raw).
            </summary>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="data">Image data buffer IntPtr (the buffer must be big enough to store the raw image for the current camera settings).</param>
            <param name="filename">The filename to save the image to.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamSaveImageEx(System.IntPtr,System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,System.Byte[],System.String)">
            <summary>
            Save an image to disk in the format according to the filename parameter's file extension (.jpg, .bmp, .tif, .raw).
            For LucamPixelFormat.PF_16, uses the endianness according to the camera handle.
            </summary>
            <param name="hCamera">Camera Handle.</param>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="data">Image data byte array (the array must be big enough to store the raw image for the current camera settings).</param>
            <param name="filename">The filename to save the image to.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamSaveImageEx(System.IntPtr,System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,System.UInt16[],System.String)">
            <summary>
            Save an image to disk in the format according to the filename parameter's file extension (.jpg, .bmp, .tif, .raw).
            For LucamPixelFormat.PF_16, uses the endianness according to the camera handle.
            </summary>
            <param name="hCamera">Camera Handle.</param>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="data">Image data ushort array (the array must be big enough to store the raw image for the current camera settings).</param>
            <param name="filename">The filename to save the image to.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamSaveImageEx(System.IntPtr,System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,System.IntPtr,System.String)">
            <summary>
            Save an image to disk in the format according to the filename parameter's file extension (.jpg, .bmp, .tif, .raw).
            For LucamPixelFormat.PF_16, uses the endianness according to the camera handle.
            </summary>
            <param name="hCamera">Camera Handle.</param>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="data">Image data buffer IntPtr (the buffer must be big enough to store the raw image for the current camera settings).</param>
            <param name="filename">The filename to save the image to.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LgcamGetIPConfiguration(System.Int32,System.Byte[],Lumenera.USB.dll.LgcamIPConfiguration@,System.Byte[],Lumenera.USB.dll.LgcamIPConfiguration@)">
            <summary>
            Get the IP configuration of a camera and its host.
            </summary>
            <param name="index">Index of the camera.</param>
            <param name="cameraMac">Mac address of the camera.</param>
            <param name="cameraConfiguration">Structure holding IP information for the camera.</param>
            <param name="hostMac">Mac address of the host.</param>
            <param name="hostConfiguration">Structure holding IP information for the host.</param>
            <returns>Returns true if camera and host ip configuration are successfully retrieved.</returns>
        </member>
        <member name="M:Lumenera.USB.dll.LgcamSetIPConfiguration(System.Int32,Lumenera.USB.dll.LgcamIPConfiguration)">
            <summary>
            Set the IP configuration of a camera.
            </summary>
            <param name="index">Index of the camera.</param>
            <param name="cameraConfiguration">Structure holding IP information for the camera.</param>
            <returns>Returns true if the camera ip configuration is successfully set.</returns>
        </member>
        <member name="T:Lumenera.USB.dll.LucamVersion">
            <summary>
            Camera version information.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamVersion.SerialNumber">
            <summary>
            Camera serial number.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamVersion.CameraId">
            <summary>
            Camera ID (USB device ID).
            Determines which driver is used.
            </summary>
        </member>
        <member name="M:Lumenera.USB.dll.LucamVersion.ToString">
            <summary>
            Base class method override so this object knows how to render itself.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamVersion.Format">
            <summary>
            Format the camera information for textual display (e.g. TextBox).
            Note that the text is formatted for display in a monospaced font.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Lumenera.USB.dll.LucamVersion.FirmwareVersion">
            <summary>
            Firmware version.
            </summary>
        </member>
        <member name="P:Lumenera.USB.dll.LucamVersion.FpgaVersion">
            <summary>
            FPGA version.
            </summary>
        </member>
        <member name="P:Lumenera.USB.dll.LucamVersion.ApiVersion">
            <summary>
            API version.
            </summary>
        </member>
        <member name="P:Lumenera.USB.dll.LucamVersion.DriverVersion">
            <summary>
            Device driver version.
            </summary>
        </member>
        <member name="T:Lumenera.USB.dll.LucamPixelFormat">
            <summary>
            Pixel format.
            The pixel format indicates the format of the data stream for raw data buffers.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamPixelFormat.PF_8">
            <summary>
            Eight bit raw data.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamPixelFormat.PF_16">
            <summary>
            Sixteen bit raw data, MSB oriented.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamPixelFormat.PF_24">
            <summary>
            24-bit RGB data (from 8 bit raw data).
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamPixelFormat.PF_YUV422">
            <summary>
            YUV data.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamPixelFormat.PF_48">
            <summary>
            48-bit RGB data (from 16 bit raw data).
            </summary>
        </member>
        <member name="T:Lumenera.USB.dll.LucamFrameFormatFlag">
            <summary>
            Flags relating to LucamFrameFormat
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamFrameFormatFlag.Binning">
            <summary>
            Determines whether the imager is in Binning or Subsampling mode.
            Only relevant if the binning or subsampling values are set to something non zero.
            </summary>
        </member>
        <member name="T:Lumenera.USB.dll.LucamFrameFormat">
            <summary>
            The image frame acquisition setup.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamFrameFormat.X">
            <summary>
            The X offset of the image data to be read out of the imager.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamFrameFormat.Y">
            <summary>
            The Y offset of the image data to be read out of the imager.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamFrameFormat.Size">
            <summary>
            The dimensions of the image data to be read out of the imager.
            <remarks>Can do this because Size is a struct.</remarks>
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamFrameFormat.Width">
            <summary>
            The width of the image data to be read out of the imager.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamFrameFormat.Height">
            <summary>
            The height of the image data to be read out of the imager.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamFrameFormat.PixelFormat">
            <summary>
            The pixel format of the data read out of the imager.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamFrameFormat.SubSampleX">
            <summary>
            Column decimation ratio.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamFrameFormat.BinningX">
            <summary>
            Column decimation ratio.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamFrameFormat.FlagsX">
            <summary>
            Column decimation control flags.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamFrameFormat.SubSampleY">
            <summary>
            Row decimation ratio.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamFrameFormat.BinningY">
            <summary>
            Row decimation ratio.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamFrameFormat.FlagsY">
            <summary>
            Row decimation control flags.
            </summary>
        </member>
        <member name="M:Lumenera.USB.dll.LucamFrameFormat.op_Equality(Lumenera.USB.dll.LucamFrameFormat,Lumenera.USB.dll.LucamFrameFormat)">
            <summary>
            Allow comparison of LucamFrameFormat structures.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.USB.dll.LucamFrameFormat.op_Inequality(Lumenera.USB.dll.LucamFrameFormat,Lumenera.USB.dll.LucamFrameFormat)">
            <summary>
            Allow comparison of LucamFrameFormat structures.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:Lumenera.USB.dll.LucamFrameFormat.ROI">
            <summary>
            The location and size of the image data to be read out of the imager.
            </summary>
            <remarks>Can't use FieldOffset like Size because Rectangle is a class.</remarks>
        </member>
        <member name="P:Lumenera.USB.dll.LucamFrameFormat.Location">
            <summary>
            The offset of the image data to be read out of the imager.
            </summary>
            <remarks>Can't use FieldOffset like Size because Point is a class.</remarks>
        </member>
        <member name="T:Lumenera.USB.dll.LgcamIPConfiguration">
            <summary>
            Structure containing the IP configuration of the camera.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LgcamIPConfiguration.IPAddress">
            <summary>
            The IP address of the camera.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LgcamIPConfiguration.SubnetMask">
            <summary>
            The SubnetMask of the camera.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LgcamIPConfiguration.DefaultGateway">
            <summary>
            The DefaultGateway of the camera.
            </summary>
        </member>
        <member name="T:Lumenera.USB.dll.LucamImageFormat">
            <summary>
            Image format description.
            This is read only image format information.
            There is some overlap with LucamFrameFormat.
            The intention is that all of the relevant image format data is described in one place for code that does not need to control the image format and just wants to know how to interpret it.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamImageFormat.Size">
            <summary>
            The size of this structure.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamImageFormat.Width">
            <summary>
            The width of the image in pixels.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamImageFormat.Height">
            <summary>
            The height of the image in pixels.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamImageFormat.PixelFormat">
            <summary>
            The pixel format of the image data buffer.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamImageFormat.ImageSize">
            <summary>
            The size (in bytes) of the image data buffer.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamImageFormat.reserved1">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamImageFormat.reserved2">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamImageFormat.reserved3">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamImageFormat.reserved4">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamImageFormat.reserved5">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamImageFormat.reserved6">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamImageFormat.reserved7">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamImageFormat.reserved8">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="T:Lumenera.USB.dll.LucamPropertyFlag">
            <summary>
            Property flags.
            These flags give more information or control over the indicated property.
            Some flags are only relevant to certain properties.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamPropertyFlag.NONE">
            <summary>
            Indicates all flags are off.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamPropertyFlag.USE">
            <summary>
            Indicates whether this property is enabled.
            Controls triggering when used with LucamProperty.VIDEO_TRIGGER
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamPropertyFlag.LITTLE_ENDIAN">
            <summary>
            Indicates whether the image for multi-byte data format is in little endian format or big endian format.
            Relevant to LucamProperty.COLOR_FORMAT.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamPropertyFlag.HW_ENABLE">
            <summary>
            Relevant to LucamProperty.VIDEO_TRIGGER.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamPropertyFlag.AUTO">
            <summary>
            Controls auto functions for properties that have an auto mode - e.g. exposure, gain, whitebalance (color gain).
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamPropertyFlag.MASTER">
            <summary>
            Relevant to LucamProperty.SYNC_MODE.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamPropertyFlag.BACKLASH_COMPENSATION">
            <summary>
            Relevant to LucamProperty.IRIS and LucamProperty.FOCUS.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamPropertyFlag.MEMORY_READBACK">
            <summary>
            Relevant to LucamProperty.MEMORY.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamPropertyFlag.USE_FOR_SNAPSHOTS">
            <summary>
            Relevant to LucamProperty.IRIS.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamPropertyFlag.SW_TRIGGER">
            <summary>
            Relevant to LucamProperty.VIDEO_TRIGGER.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamPropertyFlag.UNKNOWN_MAXIMUM">
            <summary>
            Does the property have an unknown maximum value?
            Relevant to LucamGetProperty()
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamPropertyFlag.UNKNOWN_MINIMUM">
            <summary>
            Does the property have an unknown minimum value?
            Relevant to LucamGetProperty()
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamPropertyFlag.READONLY">
            <summary>
            Is the property read only?
            Relevant to LucamPropertyRange()
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamPropertyFlag.BLUE">
            <summary>
            Controls whether the property applies to the Blue pixels.
            Relevant to LucamProperty.GAMMA, BRIGHTNESS, CONTRAST on applicable camera models.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamPropertyFlag.GREEN2">
            <summary>
            Controls whether the property applies to the Green1 pixels.
            Relevant to LucamProperty.GAMMA, BRIGHTNESS, CONTRAST on applicable camera models.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamPropertyFlag.GREEN1">
            <summary>
            Controls whether the property applies to the Green2 pixels.
            Relevant to LucamProperty.GAMMA, BRIGHTNESS, CONTRAST on applicable camera models.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamPropertyFlag.RED">
            <summary>
            Controls whether the property applies to the Red pixels.
            Relevant to LucamProperty.GAMMA, BRIGHTNESS, CONTRAST on applicable camera models.
            </summary>
        </member>
        <member name="T:Lumenera.USB.dll.LucamProperty">
            <summary>
            Camera properties.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.BRIGHTNESS">
            <summary>
            Image brightness.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.CONTRAST">
            <summary>
            Image contrast.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.HUE">
            <summary>
            Image hue.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.SATURATION">
            <summary>
            Image saturation.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.SHARPNESS">
            <summary>
            Image sharpness.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.GAMMA">
            <summary>
            Image gamma.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.PAN">
            <summary>
            Lens control - panning.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.TILT">
            <summary>
            Lens control - tilt.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.ROLL">
            <summary>
            Lens control - roll.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.ZOOM">
            <summary>
            Lens control - zoom.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.EXPOSURE">
            <summary>
            Preview (video) image exposure duration (in milliseconds).
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.IRIS">
            <summary>
            Lens control - aperture (iris).
            A larger number is more open than a smaller number.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.FOCUS">
            <summary>
            Lens control - focus.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.GAIN">
            <summary>
            Preview (video) imager global gain (applies to all color channels).
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.GAIN_RED">
            <summary>
            Preview (video) imager gain for red pixels.
            Applicable to cameras with an RGB LucamProperty.COLOR_FORMAT       
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.GAIN_BLUE">
            <summary>
            Preview (video) imager gain for blue pixels.
            Applicable to cameras with an RGB LucamProperty.COLOR_FORMAT       
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.GAIN_GREEN1">
            <summary>
            Preview (video) imager gain for green pixels.
            In a Bayer pattern imager there are two green pixels.
            Applicable to cameras with an RGB LucamProperty.COLOR_FORMAT       
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.GAIN_GREEN2">
            <summary>
            Preview (video) imager gain for green pixels.
            In a Bayer pattern imager there are two green pixels.
            Applicable to cameras with an RGB LucamProperty.COLOR_FORMAT       
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.STILL_EXPOSURE">
            <summary>
            Still (snapshot) image exposure duration (in milliseconds).
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.STILL_GAIN">
            <summary>
            Still (snapshot) imager global gain (applies to all color channels).
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.STILL_GAIN_RED">
            <summary>
            Still (snapshot) imager gain for red pixels.
            Applicable to cameras with an RGB LucamProperty.COLOR_FORMAT       
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.STILL_GAIN_GREEN1">
            <summary>
            Still (snapshot) imager gain for green pixels.
            In a Bayer pattern imager there are two green pixels.
            Applicable to cameras with an RGB LucamProperty.COLOR_FORMAT       
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.STILL_GAIN_GREEN2">
            <summary>
            Still (snapshot) imager gain for green pixels.
            In a Bayer pattern imager there are two green pixels.
            Applicable to cameras with an RGB LucamProperty.COLOR_FORMAT       
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.STILL_GAIN_BLUE">
            <summary>
            Still (snapshot) imager gain for blue pixels.
            Applicable to cameras with an RGB LucamProperty.COLOR_FORMAT       
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.DEMOSAICING_METHOD">
            <summary>
            Demosaicing method for bayer pattern color imagers.
            Property value is of type LucamDemosaicMethod.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.CORRECTION_MATRIX">
            <summary>
            Color correction matrix applied to color images.
            Property value if is of type LucamCorrectionMatrix.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.FLIPPING">
            <summary>
            The orientation of the image data.
            Property value is of type LucamFlippingFormat.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.DIGITAL_GAIN">
            <summary>
            Digital global gain.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.DIGITAL_GAIN_RED">
            <summary>
            Digital gain for red pixels.
            Applicable to cameras with an RGB LucamProperty.COLOR_FORMAT       
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.DIGITAL_GAIN_GREEN">
            <summary>
            Digital imager gain for green pixels.
            Applicable to cameras with an RGB LucamProperty.COLOR_FORMAT       
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.DIGITAL_GAIN_BLUE">
            <summary>
            Digital imager gain for blue pixels.
            Applicable to cameras with an RGB LucamProperty.COLOR_FORMAT       
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.COLOR_FORMAT">
            <summary>
            Describes the color format of the imager (monochrome or format of bayer pattern).
            Property value is of type LucamColorFormat
            Property flag LucamPropertyFlag.LITTLE_ENDIAN is relevant.
            Note: Read only.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.MAX_WIDTH">
            <summary>
            The maximum width for this camera (imager).
            Note: Read only.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.MAX_HEIGHT">
            <summary>
            The maximum height for this camera (imager).
            Note: Read only.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.AUTO_EXP_TARGET">
            <summary>
            The luminance target which governs the auto exposure, gain, white balance, iris functions of the camera.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.SNAPSHOT_CLOCK_SPEED">
            <summary>
            If the camera supports setting the imager clock speed, this property will control the clock.
            A higher value for this property indicates a slower clock speed.
            The exact clocks frequencies supported are model dependent.
            This also controls multiple tap behaviors in a model dependent way.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.AUTO_EXP_MAXIMUM">
            <summary>
            The maximum exposure used by auto exposure.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.TRIGGER">
            <summary>
            The GP IN pin number for snapshot trigger (alias of TRIGGER_PIN).
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.TRIGGER_PIN">
            <summary>
            The GP IN pin number for snapshot trigger.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.LSC_X">
            <summary>
            Lens shading correction X axis factor
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.LSC_Y">
            <summary>
            Lens shading correction Y axis factor
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.VIDEO_CLOCK_SPEED">
            <summary>
            Clock speed index. Zero is fastest framerate. Typically used to set SNAPSHOT_CLOCK_SPEED
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.AUTO_GAIN_MAXIMUM">
            <summary>
            The maximum gain used by auto gain.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.STROBE_PIN">
            <summary>
            The GP OUT pin number for strobe control.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.TAP_CONFIGURATION">
            <summary>
            Read/Set tap configuration
            Property value is of type LucamTapConfiguration.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.STILL_TAP_CONFIGURATION">
            <summary>
            Read/Set tap configuration
            Property value is of type LucamTapConfiguration.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.GEV_IPCONFIG_LLA">
            <summary>
            Enable/Disable the Link Local Address for GIGE
            Note: Read only.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.GEV_IPCONFIG_DHCP">
            <summary>
            Enable/Disable the dhcp for GIGE
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.GEV_IPCONFIG_PERSISTENT">
            <summary>
            Enable/Disable the persistent ip Address for GIGE
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.GEV_IPCONFIG_PERSISTENT_IPADDRESS">
            <summary>
            The value of the fixed ip address
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.GEV_IPCONFIG_PERSISTENT_SUBNETMASK">
            <summary>
            The value of the fixed subnet mask
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.GEV_IPCONFIG_PERSISTENT_DEFAULTGATEWAY">
            <summary>
            The value of the fixed default gateway
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamProperty.GEV_SCPD">
            <summary>
            Read/Set delay between packets
            </summary>
        </member>
        <member name="T:Lumenera.USB.dll.LucamColorFormat">
            <summary>
            Bayer imager patterns.
            For use with LucamProperty.COLOR_FORMAT
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamColorFormat.MONO">
            <summary>
            Monochrome.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamColorFormat.BAYER_RGGB">
            <summary>
            Bayer pattern.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamColorFormat.BAYER_GRBG">
            <summary>
            Bayer pattern.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamColorFormat.BAYER_GBRG">
            <summary>
            Bayer pattern.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamColorFormat.BAYER_BGGR">
            <summary>
            Bayer pattern.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamColorFormat.BAYER_CYYM">
            <summary>
            Bayer pattern.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamColorFormat.BAYER_YCMY">
            <summary>
            Bayer pattern.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamColorFormat.BAYER_YMCY">
            <summary>
            Bayer pattern.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamColorFormat.BAYER_MYYC">
            <summary>
            Bayer pattern.
            </summary>
        </member>
        <member name="T:Lumenera.USB.dll.LucamFlippingFormat">
            <summary>
            Available image flipping (mirroring) options
            For use with LucamProperty.FLIPPING
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamFlippingFormat.NONE">
            <summary>
            No flipping (default).
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamFlippingFormat.X">
            <summary>
            Flip on X axis.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamFlippingFormat.Y">
            <summary>
            Flip on Y axis.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamFlippingFormat.XY">
            <summary>
            Flip on both X and Y axes.
            </summary>
        </member>
        <member name="T:Lumenera.USB.dll.LucamTapConfiguration">
            <summary>
            Available tap configuration options.
            For use with LucamProperty.TAP_CONFIGURATION and LucamProperty.STILL_TAP_CONFIGURATION.
            </summary>
        </member>
        <member name="T:Lumenera.USB.dll.LucamDemosaicMethod">
            <summary>
            Available Bayer pattern demosaicing methods.
            For use with LucamProperty.DEMOSAICING_METHOD and LucamConversion
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamDemosaicMethod.NONE">
            <summary>
            No demosaicing.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamDemosaicMethod.FAST">
            <summary>
            Fast (low quality) demosaicing.
            Uses the nearest appropriate color pixel value in the bayer pattern, usually above or to the left.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamDemosaicMethod.SIMPLE">
            <summary>
            Similar to FAST, but the green channels are averaged.
            </summary>
        </member>
        <member name="T:Lumenera.USB.dll.LucamCorrectionMatrix">
            <summary>
            Available correction matrices for applicable lighting types.
            For use with LucamProperty.CORRECTION_MATRIX and LucamConversion
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamCorrectionMatrix.NONE">
            <summary>
            No color correction.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamCorrectionMatrix.FLUORESCENT">
            <summary>
            Flourescent color correction.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamCorrectionMatrix.DAYLIGHT">
            <summary>
            Daylight color correction.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamCorrectionMatrix.INCANDESCENT">
            <summary>
            Incandescent color correction.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamCorrectionMatrix.HALOGEN">
            <summary>
            Halogen color correction.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamCorrectionMatrix.LED">
            <summary>
            LED color correction.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamCorrectionMatrix.CUSTOM">
            <summary>
            Define the custom matrix values via LucamSetupCustomMatrix()
            </summary>
        </member>
        <member name="T:Lumenera.USB.dll.LucamConversion">
            <summary>
            Conversion properties for translating raw images into color/greyscale images.
            This is a simple wrapper required by LucamConvertFrameToXXX() functions.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamConversion.DemosaicMethod">
            <summary>
            The Bayer demosaicing method.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamConversion.CorrectionMatrix">
            <summary>
            The color correction matrix for the applicable lighting scenario.
            </summary>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConversion.#ctor(Lumenera.USB.dll.LucamDemosaicMethod,Lumenera.USB.dll.LucamCorrectionMatrix)">
            <summary>
            Constructor to initiliaze all data members.
            </summary>
            <param name="dm">The Bayer pattern demosaicing method.</param>
            <param name="cm">The color correction matrix.</param>
        </member>
        <member name="T:Lumenera.USB.dll.LucamConversionParams">
            <summary>
            Conversion properties for translating raw images into color/greyscale images.
            This is a simple wrapper required by the Ex versions of LucamConvertFrameToXXX() functions.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamConversionParams.Size">
            <summary>
            Size of this structure.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamConversionParams.DemosaicMethod">
            <summary>
            The Bayer demosaicing method.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamConversionParams.CorrectionMatrix">
            <summary>
            The color correction matrix for the applicable lighting scenario.
            </summary>
        </member>
        <member name="M:Lumenera.USB.dll.LucamConversionParams.#ctor(Lumenera.USB.dll.LucamDemosaicMethod,Lumenera.USB.dll.LucamCorrectionMatrix,System.Boolean,System.Boolean,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor to initiliaze all data members, including Size.
            </summary>
            <param name="dm">The Bayer pattern demosaicing method.</param>
            <param name="cm">The color correction matrix.</param>
            <param name="flipX">Flip the image.</param>
            <param name="flipY">Flip the image.</param>
            <param name="hue">Hue.</param>
            <param name="saturation">Saturation</param>
            <param name="gainRed">Red digital gain.</param>
            <param name="gainGreen">Green digital gain.</param>
            <param name="gainBlue">Blue digital gain.</param>
        </member>
        <member name="T:Lumenera.USB.dll.LucamStreamMode">
            <summary>
            Modes for video preview stream.
            Used by LucamStreamVideoControl()
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamStreamMode.STOP_STREAMING">
            <summary>
            Stop streaming.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamStreamMode.START_STREAMING">
            <summary>
            Start streaming.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamStreamMode.START_DISPLAY">
            <summary>
            Start streaming and display of video frames in a video window.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamStreamMode.PAUSE_STREAM">
            <summary>
            Pause streaming.
            </summary>
        </member>
        <member name="T:Lumenera.USB.dll.LucamRgbPreviewCallback">
            <summary>
            Delegate for RGB frame callbacks.
            Used by LucamAddRgbPreviewCallback().
            </summary>
            <param name="context">A unique value supplied to LucamAddRgbPreviewCallback() when the callback was registered.</param>
            <param name="pData">Image data pointer.</param>
            <param name="n">Image data length.</param>
            <param name="unused"></param>
        </member>
        <member name="T:Lumenera.USB.dll.LucamStreamingCallback">
            <summary>
            Delegate for video stream frame callbacks and snapshot callbacks.
            Used by LucamAddStreamingCallback(), LucamAddSnapshotCallback().
            </summary>
            <param name="context">A unique value supplied to LucamAddStreamingCallback() when the callback was registered.</param>
            <param name="pData">Image data pointer.</param>
            <param name="n">Image data length.</param>
        </member>
        <member name="T:Lumenera.USB.dll.LucamShutterType">
            <summary>
            Shutter types available for Still (Snapshot) images.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamShutterType.GlobalShutter">
            <summary>
            Global Shutter.
            All rows of the imager are exposed at the same time.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamShutterType.RollingShutter">
            <summary>
            Rolling Shutter.
            Each row starts to expose after it is read out so each row starts to expose slightly later than the one before it.
            </summary>
        </member>
        <member name="T:Lumenera.USB.dll.LucamSnapshot">
            <summary>
            Parameters for the snapshot.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamSnapshot.Exposure">
            <summary>
            Snapshot exposure duration.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamSnapshot.Gain">
            <summary>
            Snapshot  global gain.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamSnapshot.GainRed">
            <summary>
            Snapshot red gain.
            Applicable to cameras with an RGB LucamProperty.COLOR_FORMAT       
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamSnapshot.GainMagenta">
            <summary>
            Snapshot magenta gain.
            Applicable to cameras with a CMY LucamProperty.COLOR_FORMAT       
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamSnapshot.GainBlue">
            <summary>
            Snapshot blue gain.
            Applicable to cameras with an RGB LucamProperty.COLOR_FORMAT       
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamSnapshot.GainCyan">
            <summary>
            Snapshot cyan gain.
            Applicable to cameras with a CMY LucamProperty.COLOR_FORMAT       
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamSnapshot.GainGrn1">
            <summary>
            Snapshot green gain.
            Applicable to cameras with an RGB LucamProperty.COLOR_FORMAT       
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamSnapshot.GainYel1">
            <summary>
            Snapshot yellow gain.
            Applicable to cameras with a CMY LucamProperty.COLOR_FORMAT       
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamSnapshot.GainGrn2">
            <summary>
            Snapshot green gain.
            Applicable to cameras with an RGB LucamProperty.COLOR_FORMAT       
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamSnapshot.GainYel2">
            <summary>
            Snapshot yellow gain.
            Applicable to cameras with a CMY LucamProperty.COLOR_FORMAT       
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamSnapshot.StrobeFlags">
            <summary>
            Set to 1 to use the strobe.
            In future, this might have additional values.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamSnapshot.UseHwTrigger">
            <summary>
            Wait for GPIO hardware input trigger.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamSnapshot.Timeout">
            <summary>
            Snapshot timeout in milliseconds.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamSnapshot.Format">
            <summary>
            Snapshot frame format (window size, etc.)
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamSnapshot.ShutterType">
            <summary>
            Shutter type to use for snapshot.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamSnapshot.ulReserved2">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamSnapshot.flReserved1">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamSnapshot.flReserved2">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="T:Lumenera.USB.dll.LucamExternalInterface">
            <summary>
            Camera connection interface types.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamExternalInterface.USB1">
            <summary>
            USB 1.1
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamExternalInterface.USB2">
            <summary>
            USB 2.0
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamExternalInterface.USB3">
            <summary>
            USB 3.0.
            Note that with USB3, CameraOpen() does not reenumerate cameras.
            If you disconnect from a camera, trying to reopen the camera will fail.
            To work around this, call NumCameras() to force a reenumeration.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamExternalInterface.GIGEVISION">
            <summary>
            GigE Vision
            </summary>
        </member>
        <member name="T:Lumenera.USB.dll.LucamProgressCallback">
            <summary>
            Delegate used for fns that return progress asynchronously via a callback.
            Used by AutoFocusStart()
            </summary>
            <param name="context">A unique value supplied when the callback was registered.</param>
            <param name="percentageCompleted">Progress (in %).</param>
        </member>
        <member name="T:Lumenera.USB.dll.LucamDeltaPixMode">
            <summary>
            The resolution multiplier for Lumenera cameras that support high resolution image capture by pixel shifting.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamDeltaPixMode.X2">
            <summary>
            Capture a high resolution image at 1x resolution in both X and Y directions but using DeltaPix rather than Bayer demosaicing.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamDeltaPixMode.X4">
            <summary>
            Capture a high resolution image at 4x resolution.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamDeltaPixMode.X6">
            <summary>
            Capture a high resolution image at 9x resolution.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamDeltaPixMode.X8">
            <summary>
            Capture a high resolution image at 16x resolution. This mode corresponds to the maximal resolution implicit in the naming of the X-32 ad X-21.
            </summary>
        </member>
        <member name="T:Lumenera.USB.dll.LucamError">
            <summary>
            Error codes returned by Lucam functions.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.NoError">
            <summary>
            No Error (success)
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.NoSuchIndex">
            <summary>
            Index parameter to Lucam function does not exist.
            Note that the first index is 1, not 0.
            E.g. camera index to LucamCameraOpen().
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.SnapshotNotSupported">
            <summary>
            Snapshot not supported for this model (aka still, aka fast frames).
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.InvalidPixelFormat">
            <summary>
            Pixel format requested is not valid.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.SubsamplingZero">
            <summary>
            A subsampling of zero was passed to a function.
            The subsampling (or binning) factor must be a positive integer - 1, 2, 4
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.Busy">
            <summary>
            Lucam API is busy.
            A retry of this call after a small delay may succeed.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.FailedToSetSubsampling">
            <summary>
            Setting the requested subsampling in LucamFrameFormat failed.
            Could be due to DirectShow filter not being installed.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.FailedToSetStartPosition">
            <summary>
            Setting the image offset in LucamFrameFormat failed.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.PixelFormatNotSupported">
            <summary>
            Pixel format requested is not supported by this camera.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.InvalidFrameFormat">
            <summary>
            Frame format requested is not valid.
            See also error values 3, 4, 6, 7, 8 for more specific LucamFrameFormat setting errors.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.PreparationFailed">
            <summary>
            The API failed to prepare the camera for streaming or snapshot. 
            If START_STREAMING succeeds and START_DISPLAY fails with this error, this can be due to a DirectShow filter not being installed.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.CannotRun">
            <summary>
            The API failed to get the camera running. This can be due to a bandwidth problem.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.NotRunning">
            <summary>
            The function failed because it requires the camera to be running, and it is not.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.CannotSetupFrameFormat">
            <summary>
            The camera does not setup it's frame format. 
            This will happen if your camera is plugged to a USB 1 port and it does not support it.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.DirectShowInitError">
            <summary>
            Direct Show initialization error.
            This may happen if you run the API before having installed a DS compatible camera ever before.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.CameraNotFound">
            <summary>
            LucamCameraOpen() did not find the requested index.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.Timeout">
            <summary>
            Call timed out.
            E.g. acquisition of an image from the camera timed out.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.PropertyUnknown">
            <summary>
            Property is invalid.
            Check that you have an up to date lucamapi.dll.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.PropertyUnsupported">
            <summary>
            Property is not supported by this camera.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.PropertyAccessFailed">
            <summary>
            Accessing this property failed.           
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.LucustomNotFound">
            <summary>
            The lucustom.ax filter was not found.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.PreviewNotRunning">
            <summary>
            The function failed because preview is not running.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.LutfNotLoaded">
            <summary>
            The function failed because lutf.ax is not loaded.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.DirectShowError">
            <summary>
            An error related to the operation of DirectShow occured.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.NoMoreCallbacks">
            <summary>
            The function LucamAddStreamingCallback failed because the API cannot support any more callbacks
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.UndeterminedFrameFormat">
            <summary>
            The API does not know what is the frame format of the camera.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.InvalidParameter">
            <summary>
            A function parameter has a invalid value.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.NotEnoughResources">
            <summary>
            Resource allocation failed.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.NoSuchConversion">
            <summary>
            One of the members of the LucamConversion is either unknown or inappropriate
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.ParameterNotWithinBoundaries">
            <summary>
            A parameter is out of range.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.BadFileIo">
            <summary>
            An error occured creating a file or writing to it. 
            Verify that the path exists.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.GdiplusNotFound">
            <summary>
            gdiplus.dll is needed and was not found.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.GdiplusError">
            <summary>
            gdiplus.dll reported an error. 
            This may happen if there is a file io error.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.FailedCreateDisplay">
            <summary>
            The API failed to create the display window. 
            The reason could be insufficient resources.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.DpLibNotFound">
            <summary>
            deltapolation.dll is needed and was not found.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.DpCmdNotSupported">
            <summary>
            The deltapolation command is not supported by the delta polation library.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.DpCmdUnknown">
            <summary>
            The deltapolation command is unknown or invalid.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.NotWhilePaused">
            <summary>
            The function cannot be performed when the camera is in paused state.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.InvalidTarget">
            <summary>
            One of the target parameters is wrong. 
            This error code is used when offset + size > (undecimated size / subSample) or if any of those parameter is odd (not a multiple of 2) or if width or height is 0.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.FrameTooDark">
            <summary>
            The frame is too dark to perform white balance.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.KsPropertySetNotFound">
            <summary>
            A DirectShow IKsControl interface is not found.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.Cancelled">
            <summary>
            The user cancelled the operation.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.KsControlNotSupported">
            <summary>
            The DirectShow IKsControl interface is not supported.
            Occurs when a camera is unplugged.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.NoPreview">
            <summary>
            The function failed because preview was not setup.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.SetPositionFailed">
            <summary>
            A function setting window position failed
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.NoFrameRateList">
            <summary>
            The frame rate list is not available.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.FrameRateInconsistent">
            <summary>
            There was an error building the frame rate list.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.CameraNotConfiguredForCmd">
            <summary>
            The camera does not support that particular command.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.InvalidTriggerMode">
            <summary>
            You cannot cause a soft trigger when hw trigger is enabled.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.NotFound">
            <summary>
            Requested data is not found.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.PermanentBufferNotSupported">
            <summary>
            The onboard EEPROM is too small.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.EepromWriteFailed">
            <summary>
            The API failed to write to the onboard eeprom.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.UnknownFileType">
            <summary>
            The API failed because it failed to recognize the file type of a file name passed to it.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.EventIdNotSupported">
            <summary>
            LucamRegisterEventNotification failed because the event is not supported.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.EepromCorrupted">
            <summary>
            The API found that the EEPROM was corrupted.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.SectionTooBig">
            <summary>
            The VPD section to write to the eeprom is too big.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.FrameTooBright">
            <summary>
            The frame is too bright to perform white balance.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.NoCorrectionMatrix">
            <summary>
            The camera is configured to have no correction matrix (LucamCorrectionMatrix.None) and the function requires one.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.UnknownCameraModel">
            <summary>
            The API failed because it needs to know the camera model and it is not available.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.ApiTooOld">
            <summary>
            The API failed because it needs to be upgraded to access a feature of the camera.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.SaturationZero">
            <summary>
            The API failed because the saturation is currently 0.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.AlreadyInitialised">
            <summary>
            The API failed because the object was already initialised.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.FileConversionFailed">
            <summary>
            The API failed because the file conversion was not completed.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.FileAlreadyConverted">
            <summary>
            The API failed because the file is already converted in the desired format.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.PropertyPageNotSupported">
            <summary>
            The API failed to display the Direct Show property page.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.PropertyPageCreationFailed">
            <summary>
            The API failed to create the Direct Show page.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.DirectShowFilterNotInstalled">
            <summary>
            The API did not find the required Direct Show filter.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.IndividualLutNotAvailable">
            <summary>
            The camera does not support that different LUTs are applied to each color.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.StreamingStopped">
            <summary>
            LucamTakeFastFrame or LucamTakeVideo failed because another thread interrupted the streaming by a call to LucamDisableFastFrames or LucamStreamVideoControl.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.MustBeInSwTriggerMode">
            <summary>
            LucamForceTakeFastFrame was called while the camera is in hardware trigger still mode.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.AutoLensUninitialized">
            <summary>
            The auto lens needs to be initialized before the function is used.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.LensNotInstalled">
            <summary>
            The function failed because the lens were not installed correctly. Verify that changing the focus has any effect.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.FocusNoFeedbackError">
            <summary>
            There is no feedback available for focus.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.LutfTooOld">
            <summary>
            lutf.ax is too old for this feature.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.UnknownAviFormat">
            <summary>
            Unknown or invalid AVI format for input file.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.UnknownAviType">
            <summary>
            Unknown AVI type.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.InvalidAviConversion">
            <summary>
            The AVI conversion is invalid.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.SeekFailed">
            <summary>
            The seek failed.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.AviRunning">
            <summary>
            The function cannot be performed while an AVI is being captured.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.CameraAlreadyOpened">
            <summary>
            An attempt was made to open a camera for streaming-related reasons while it is already opened for such.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.NoSubsampledHighRes">
            <summary>
            The API cannot take a high resolution image in subsampled mode or binning mode.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.OnlyOnMonochrome">
            <summary>
            The API function is only available on monochrome cameras.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.No8bppTo48bpp">
            <summary>
            Building a 48 bpp image from an 8 bpp image is invalid.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.Lut8Obsolete">
            <summary>
            Use 12 bits lut instead.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.FunctionNotSupported">
            <summary>
            Function is not supported.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.LucamRetryLimitReached">
            <summary>
            Retries limit was reached without completing the operation.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.LucamLgDeviceError">
            <summary>
            An IO operation to the camera failed.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.LucamInvalidIpConfiguration">
            <summary>
            The Lg camera has an invalid IP configuration.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.LucamInvalidLicense">
            <summary>
            The license to operate the camera is invalid
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.LucamNoSystemEnumerator">
            <summary>
            Camera enumeration is impossible due to a software installation error.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.LucamBusEnumeratorNotInstalled">
            <summary>
            Camera enumeration is impossible due to a software installation error.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.LucamUnknownExternInterface">
            <summary>
            Unknown external interface.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.LucamInterfaceDriverNotInstalled">
            <summary>
            Incomplete or incorrect software installation prevents streaming from the camera.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.LucamCameraDriverNotInstalled">
            <summary>
            Incomplete or incorrect software installation prevents streaming from the camera.
            Opening the device manager and updating the drivers on the relevant device may fix the issue.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.LucamCameraDriverInstallInProgress">
            <summary>
            Incomplete or incorrect software installation prevents streaming from the camera.
            Opening the device manager and updating the drivers on the relevant device may fix the issue.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.LucamLucamapiDotDllNotFound">
            <summary>
            Lucamapi.dll is not found. 
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.LucamLucamapiProcedureNotFound">
            <summary>
            A procedure in Lucamapi.dll was not found. 
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.LucamPropertyNotEnumeratable">
            <summary>
            The property cannot be accessed via LucamEnumProperty.
            </summary>
        </member>
        <member name="F:Lumenera.USB.dll.LucamError.LucamPropertyNotBufferable">
            <summary>
            The property cannot be accessed via LucamPropertyGetBuffer.
            </summary>
        </member>
        <member name="T:Lumenera.USB.LucamException">
            <summary>
            Facilitate error handling and error display for Lucam API calls.
            </summary>
        </member>
        <member name="F:Lumenera.USB.LucamException.lucamError">
            <summary>
            The Lucam API error code associated with this exception.
            </summary>
        </member>
        <member name="M:Lumenera.USB.LucamException.#ctor(Lumenera.USB.dll.LucamError)">
            <summary>
            Create a LucamException.
            </summary>
            <remarks>
            The occurrence of this exception is also logged to the VS debug output log.
            </remarks>
            <param name="e">The LucamAPI error code.</param>
        </member>
        <member name="M:Lumenera.USB.LucamException.#ctor(Lumenera.USB.dll.LucamError,System.String)">
            <summary>
            Create a LucamException. 
            </summary>
            <param name="e">The LucamAPI error code.</param>
            <param name="m">The message string passed to the base Exception constructor.</param>
            <remarks>The occurrence of this exception is also logged to the VS debug output log.</remarks>
        </member>
        <member name="M:Lumenera.USB.LucamException.#ctor(System.IntPtr)">
            <summary>
            Create a LucamException.
            </summary>
            <param name="h">Camera handle.</param>
        </member>
        <member name="M:Lumenera.USB.LucamException.#ctor(System.IntPtr,System.String)">
            <summary>
            Create a LucamException.
            </summary>
            <param name="h">Camera handle.</param>
            <param name="m">The message string passed to the base Exception constructor.</param>
        </member>
        <member name="M:Lumenera.USB.LucamException.ToString">
            <summary>
            Extend the basic ToString() to include formatted Name/Value pairs in Exception.Data.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Lumenera.USB.LucamException.Message">
            <summary>
            Extend the basic Message property to include the formatted Lucam API error which caused the exception.
            </summary>
        </member>
        <member name="M:Lumenera.USB.ExtensionMethods.Format(Lumenera.USB.dll.LucamError)">
            <summary>
            Format an error as both a name and number.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.USB.ExtensionMethods.Format(Lumenera.USB.dll.LucamProperty)">
            <summary>
            Format a property as both a name and number.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.USB.ExtensionMethods.Format(Lumenera.USB.dll.LucamPropertyFlag)">
            <summary>
            Format a LucamPropertyFlag with the possible flag name(s) for each bit that is turned on.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.USB.ExtensionMethods.BitsPerPixel(Lumenera.USB.dll.LucamPixelFormat)">
            <summary>
            Get the size of a pixel in bits.
            </summary>
            <param name="pf"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.USB.ExtensionMethods.BytesPerPixel(Lumenera.USB.dll.LucamPixelFormat)">
            <summary>
            Get the size of a pixel in bytes.
            </summary>
            <param name="pf"></param>
            <returns>Pixel size in bytes.</returns>
        </member>
        <member name="M:Lumenera.USB.ExtensionMethods.Size(Lumenera.USB.dll.LucamPixelFormat)">
            <summary>
            Get the size of a pixel in bytes.
            </summary>
            <param name="pf"></param>
            <returns>Pixel size in bytes.</returns>
        </member>
        <member name="T:Lumenera.USB.api">
            <summary>
            Facilitate the use of the Lucam API with appropriate .NET datatypes (E.g. arrays, Rectangles, Size, Offset, Point, etc.)
            and provide helper functions to perform common Lucam tasks associated with Lucam API calls.
            These functions throw exceptions on error (none return error codes - except via exceptions).
            </summary>
        </member>
        <member name="M:Lumenera.USB.api.LastError(System.IntPtr)">
            <summary>
            Concise wrapper for the Lucam API GetLastErrorForCamera()
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>Lucam API error code.</returns>
        </member>
        <member name="M:Lumenera.USB.api.GetLastErrorForAPI">
            <summary>
            Query the error code for the last API error (not camera specific - for camera specific error, see LucamGetLastErrorForCamera().
            </summary>
            <returns>The error code.</returns>
        </member>
        <member name="M:Lumenera.USB.api.LastErrorString(System.IntPtr)">
            <summary>
            The composed error string for the last Lucam API error on the specified camera handle.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>The composed error string.</returns>
        </member>
        <member name="M:Lumenera.USB.api.LastError">
            <summary>
            Concise wrapper for the Lucam API GetLastError().
            </summary>
            <returns>Lucam API error code.</returns>
        </member>
        <member name="M:Lumenera.USB.api.LastErrorString">
            <summary>
            The composed error string for the last Lucam API error.
            </summary>
            <returns>The composed error string.</returns>
        </member>
        <member name="M:Lumenera.USB.api.QueryExternInterface(System.IntPtr)">
            <summary>
            Query the camera connection type.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <returns>camera connection type</returns>
        </member>
        <member name="M:Lumenera.USB.api.SelectExternInterface(Lumenera.USB.dll.LucamExternalInterface)">
            <summary>
            Select which physical interface API will operate on.
            </summary>
            <remarks>
            USB1, USB2 and USB3 all enumerate all version of USB devices.
            </remarks>
            <param name="externInterface">Interface to use</param>
        </member>
        <member name="M:Lumenera.USB.api.GetCameras">
            <summary>
            Get the list of connected cameras.
            </summary>
            <returns>Array of LucamVersion structures representing the connected cameras.</returns>
        </member>
        <member name="M:Lumenera.USB.api.NumCameras">
            <summary>
            Query the number of connected cameras.
            </summary>
            <remarks>Performs the actual device enumeration.</remarks>
            <returns>The number of cameras.</returns>
        </member>
        <member name="M:Lumenera.USB.api.EnumCameras">
            <summary>
            Get the list of connected cameras.
            </summary>
            <remarks>
            Returns the device enumeration determined by LucamNumCameras(). 
            If LucamNumCameras() hasn't been called, it will be called internally.
            </remarks>        
            <returns>Array of LucamVersion structures representing the connected cameras.</returns>
        </member>
        <member name="M:Lumenera.USB.api.GetVersion(System.IntPtr)">
            <summary>
            Get the version information for the specified camera handle.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>LucamVersion structure for the specified camera.</returns>
        </member>
        <member name="M:Lumenera.USB.api.GetSerialNumber(System.IntPtr)">
            <summary>
            Get the USB device serial number for the specified camera handle.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>The camera USB device serial number.</returns>
        </member>
        <member name="M:Lumenera.USB.api.GetDeviceId(System.IntPtr)">
            <summary>
            Get the USB driver ID for the specified camera handle.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>device ID</returns>
        </member>
        <member name="M:Lumenera.USB.api.IsCameraValid(System.IntPtr)">
            <summary>
            Determine if the specified camera handle is still valid.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.USB.api.GetCameraId(System.IntPtr)">
            <summary>
            Get the USB camera device ID.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <returns>device ID</returns>
        </member>
        <member name="M:Lumenera.USB.api.IsExposureCentric(System.IntPtr)">
            <summary>
            Determines if the camera exposure can exceed the current frame period.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.USB.api.GetFormat(System.IntPtr,Lumenera.USB.dll.LucamFrameFormat@,System.Single@)">
            <summary>
            Get the camera frame format (framerate, subwindow, subsample/binning).
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="format">Frame format (output).</param>
            <param name="frameRate">Framerate (output).</param>
        </member>
        <member name="M:Lumenera.USB.api.GetFormat(System.IntPtr,System.Single@)">
            <summary>
            Get the camera frame format (framerate, subwindow, subsample/binning).
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="frameRate">Framerate (output).</param>
            <returns>The frame format structure.</returns>
        </member>
        <member name="M:Lumenera.USB.api.GetFormat(System.IntPtr)">
            <summary>
            Get the frame format.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>The frame format structure.</returns>
        </member>
        <member name="M:Lumenera.USB.api.SetFormat(System.IntPtr,Lumenera.USB.dll.LucamFrameFormat,System.Double)">
            <summary>
            Set the camera frame format (framerate, subwindow, subsample/binning).
            </summary>
            <param name="h">Camera handle.</param>
            <param name="format">Frame format.</param>
            <param name="frameRate">Framerate.</param>
        </member>
        <member name="M:Lumenera.USB.api.GetRoi(System.IntPtr)">
            <summary>
            Get the current Region of Interest (ROI) for the specified camera.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>The rectangle describing the ROI of the imager that is associated with the raw data stream.</returns>
        </member>
        <member name="M:Lumenera.USB.api.GetResolution(System.IntPtr)">
            <summary>
            Get the current dimensions of the Region of Interest (ROI) for the specified camera.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>The dimensions of the ROI.</returns>
        </member>
        <member name="M:Lumenera.USB.api.GetResolution(System.IntPtr,System.Int32@,System.Int32@)">
            <summary>
            Get the current dimensions of the Region of Interest (ROI) for the specified camera.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="width">The width of the ROI (output).</param>
            <param name="height">The height of the ROI (output).</param>
        </member>
        <member name="M:Lumenera.USB.api.SetResolution(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Set the current dimensions of the Region of Interest (ROI) for the specified camera.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="width">The width of the ROI.</param>
            <param name="height">The height of the ROI.</param>
        </member>
        <member name="M:Lumenera.USB.api.GetFrameRate(System.IntPtr)">
            <summary>
            Get the current frame rate for the specified camera.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>The current camera frame rate.</returns>
        </member>
        <member name="M:Lumenera.USB.api.SetFrameRate(System.IntPtr,System.Double)">
            <summary>
            Set the frame rate for the specified camera. Note that the camera may not support an arbitrary frame rate.
            To determine which frame rate is actually configured the user should call GetFrameRate() afterwards.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="frameRate">Frame rate.</param>
        </member>
        <member name="M:Lumenera.USB.api.SetCheckFrameRate(System.IntPtr,System.Double)">
            <summary>
            Set the frame rate of the specified camera.
            Check that the framerate is withing 5% of the requested frame rate.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="frameRate">Frame rate.</param>
        </member>
        <member name="M:Lumenera.USB.api.GetPixelFormat(System.IntPtr)">
            <summary>
            Get the current pixel format for the raw image data stream for the specified camera.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>The current raw data stream pixel format.</returns>
        </member>
        <member name="M:Lumenera.USB.api.SetPixelFormat(System.IntPtr,Lumenera.USB.dll.LucamPixelFormat)">
            <summary>
            Set the current pixel format for the raw image data stream.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="pixelFormat">The Lucam API pixel format.</param>
        </member>
        <member name="M:Lumenera.USB.api.GetTruePixelDepth(System.IntPtr)">
            <summary>
            Get the actual image pixel depth (number of significant bits) for the specified camera handle.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>The number of significant bits for the camera image data.</returns>
        </member>
        <member name="M:Lumenera.USB.api.GetPixelFormatBitsPerPixel(System.IntPtr)">
            <summary>
            Determine the number of bits per pixel for the Lucam API pixel formats.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>The number of bits per pixel.</returns>
        </member>
        <member name="M:Lumenera.USB.api.GetPixelFormatBytesPerPixel(System.IntPtr)">
            <summary>
            Determine the number of bits per pixel for the Lucam API pixel formats.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>The number of bytes per pixel.</returns>
        </member>
        <member name="M:Lumenera.USB.api.GetPixelFormatImageSize(System.IntPtr)">
            <summary>
            Get the size of each image in bytes for the current ROI and pixel format.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>The number of bytes per image.</returns>
        </member>
        <member name="M:Lumenera.USB.api.GetPixelFormatLsb(System.IntPtr)">
            <summary>
            Get the bit position of the least significant bit of image data.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>The bit position of the least significant bit of image data.</returns>
        </member>
        <member name="M:Lumenera.USB.api.ConvertFrameToRgb24(System.IntPtr,System.Byte[],System.Byte[],System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion)">
            <summary>
            Convert an 8-bit raw frame to RGB format (BGR, bottom line first)
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">RGB data byte array. Must be big enough to store the RGB 24 image (width * height * 3).</param>
            <param name="src">Raw data byte array. Must be big enough to store the raw data frame (width * height * bytes per pixel (for the selected pixel format)).</param>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
        </member>
        <member name="M:Lumenera.USB.api.ConvertFrameToRgb24(System.IntPtr,System.Byte[],System.Byte[],Lumenera.Geometry.Size,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion)">
            <summary>
            Convert an 8-bit raw frame to RGB format (BGR, bottom line first)
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">RGB data byte array. Must be big enough to store the RGB 24 image (width * height * 3).</param>
            <param name="src">Raw data byte array. Must be big enough to store the raw data frame (width * height * bytes per pixel (for the selected pixel format)).</param>
            <param name="frameSize">Image frame.</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
        </member>
        <member name="M:Lumenera.USB.api.ConvertFrameToRgb24(System.IntPtr,System.Byte[],System.UInt16[],System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion)">
            <summary>
            Convert an 8-bit raw frame to RGB format (BGR, bottom line first)
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">RGB data byte array. Must be big enough to store the RGB 24 image (width * height * 3).</param>
            <param name="src">Raw data ushort array. Must be big enough to store the raw data frame (width * height * bytes per pixel (for the selected pixel format)).</param>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
        </member>
        <member name="M:Lumenera.USB.api.ConvertFrameToRgb24(System.IntPtr,System.Byte[],System.UInt16[],Lumenera.Geometry.Size,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion)">
            <summary>
            Convert an 8-bit raw frame to RGB format (BGR, bottom line first)
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">RGB data byte array. Must be big enough to store the RGB 24 image (width * height * 3).</param>
            <param name="src">Raw data ushort array. Must be big enough to store the raw data frame (width * height * bytes per pixel (for the selected pixel format)).</param>
            <param name="frameSize">Image frame.</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
        </member>
        <member name="M:Lumenera.USB.api.ConvertFrameToRgb48(System.IntPtr,System.Byte[],System.Byte[],System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion)">
            <summary>
            Convert an 16-bit raw frame to RGB format.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">RGB data byte array. Must be big enough to store the RGB 48 image (width * height * 6).</param>
            <param name="src">Raw data byte array. Must be big enough to store the raw data frame (width * height * bytes per pixel (for the selected pixel format)).</param>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
        </member>
        <member name="M:Lumenera.USB.api.ConvertFrameToRgb48(System.IntPtr,System.Byte[],System.Byte[],Lumenera.Geometry.Size,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion)">
            <summary>
            Convert an 16-bit raw frame to RGB format.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">RGB data byte array. Must be big enough to store the RGB 48 image (width * height * 6).</param>
            <param name="src">Raw data byte array. Must be big enough to store the raw data frame (width * height * bytes per pixel (for the selected pixel format)).</param>
            <param name="frameSize">Width and Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
        </member>
        <member name="M:Lumenera.USB.api.ConvertFrameToGreyscale8(System.IntPtr,System.Byte[],System.Byte[],System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion)">
            <summary>
            Convert a raw frame to monochrome greyscale format (top line first).
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">Monochrome data. Must be big enough to store the greyscale 8-bit image (width * height).</param>
            <param name="src">Raw data source for the specified pixel format.</param>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
        </member>
        <member name="M:Lumenera.USB.api.ConvertFrameToGreyscale8(System.IntPtr,System.Byte[],System.Byte[],Lumenera.Geometry.Size,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion)">
            <summary>
            Convert a raw frame to monochrome greyscale format (top line first).
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">Monochrome data. Must be big enough to store the greyscale 8-bit image (width * height).</param>
            <param name="src">Raw data source for the specified pixel format.</param>
            <param name="frameSize">Width and Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
        </member>
        <member name="M:Lumenera.USB.api.ConvertFrameToGreyscale16(System.IntPtr,System.Byte[],System.Byte[],System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion)">
            <summary>
            Convert a raw frame to monochrome greyscale format.
            Note that it is not necessary to call this function if the camera is a monochrome camera since the raw data format is already in the appropriate greyscale format.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">Monochrome data. Must be big enough to store the greyscale 16-bit image (width * height).</param>
            <param name="src">Raw data source for the specified pixel format.</param>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
        </member>
        <member name="M:Lumenera.USB.api.ConvertFrameToGreyscale16(System.IntPtr,System.Byte[],System.Byte[],Lumenera.Geometry.Size,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion)">
            <summary>
            Convert a raw frame to monochrome greyscale format.
            Note that it is not necessary to call this function if the camera is a monochrome camera since the raw data format is already in the appropriate greyscale format.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">Monochrome data. Must be big enough to store the greyscale 16-bit image (width * height).</param>
            <param name="src">Raw data source for the specified pixel format.</param>
            <param name="frameSize">Width and Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
        </member>
        <member name="M:Lumenera.USB.api.ConvertFrameToGreyscale16(System.IntPtr,System.UInt16[],System.UInt16[],System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion)">
            <summary>
            Convert a raw frame to monochrome greyscale format.
            Note that it is not necessary to call this function if the camera is a monochrome camera since the raw data format is already in the appropriate greyscale format.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">Monochrome data. Must be big enough to store the greyscale 16-bit image (width * height).</param>
            <param name="src">Raw data source for the specified pixel format.</param>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
        </member>
        <member name="M:Lumenera.USB.api.ConvertFrameToGreyscale16(System.IntPtr,System.UInt16[],System.UInt16[],Lumenera.Geometry.Size,Lumenera.USB.dll.LucamPixelFormat,Lumenera.USB.dll.LucamConversion)">
            <summary>
            Convert a raw frame to monochrome greyscale format.
            Note that it is not necessary to call this function if the camera is a monochrome camera since the raw data format is already in the appropriate greyscale format.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">Monochrome data. Must be big enough to store the greyscale 16-bit image (width * height).</param>
            <param name="src">Raw data source for the specified pixel format.</param>
            <param name="frameSize">Width and Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
        </member>
        <member name="M:Lumenera.USB.api.ConvertFrameToRgb24Ex(System.IntPtr,System.Byte[],System.Byte[],Lumenera.USB.dll.LucamImageFormat,Lumenera.USB.dll.LucamConversionParams)">
            <summary>
            Convert an 8-bit raw frame to RGB format.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">RGB data byte array. Must be big enough to store the RGB 24 image (width * height * 3).</param>
            <param name="src">Raw data byte array. Must be big enough to store the raw data frame (width * height * bytes per pixel (for the selected pixel format)).</param>
            <param name="ifmt">LucamImageFormat describing the raw image format.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
        </member>
        <member name="M:Lumenera.USB.api.ConvertFrameToRgb32Ex(System.IntPtr,System.Byte[],System.Byte[],Lumenera.USB.dll.LucamImageFormat,Lumenera.USB.dll.LucamConversionParams)">
            <summary>
            Convert an 8-bit raw frame to RGB format.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">RGB data byte array. Must be big enough to store the RGB 24 image (width * height * 3).</param>
            <param name="src">Raw data byte array. Must be big enough to store the raw data frame (width * height * bytes per pixel (for the selected pixel format)).</param>
            <param name="ifmt">LucamImageFormat describing the raw image format.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
        </member>
        <member name="M:Lumenera.USB.api.ConvertFrameToRgb48Ex(System.IntPtr,System.Byte[],System.Byte[],Lumenera.USB.dll.LucamImageFormat,Lumenera.USB.dll.LucamConversionParams)">
            <summary>
            Convert an 16-bit raw frame to RGB format.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">RGB data byte array. Must be big enough to store the RGB 48 image (width * height * 6).</param>
            <param name="src">Raw data byte array. Must be big enough to store the raw data frame (width * height * bytes per pixel (for the selected pixel format)).</param>
            <param name="ifmt">LucamImageFormat describing the raw image format.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>]
        </member>
        <member name="M:Lumenera.USB.api.ConvertFrameToGreyscale8Ex(System.IntPtr,System.Byte[],System.Byte[],Lumenera.USB.dll.LucamImageFormat,Lumenera.USB.dll.LucamConversionParams)">
            <summary>
            Convert a raw frame to monochrome greyscale format.
            Note that it is not necessary to call this function if the camera is a monochrome camera since the raw data format is already in the appropriate greyscale format.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">Monochrome data. Must be big enough to store the greyscale 8-bit image (width * height).</param>
            <param name="src">Raw data source for the specified pixel format.</param>
            <param name="ifmt">LucamImageFormat describing the raw image format.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
        </member>
        <member name="M:Lumenera.USB.api.ConvertFrameToGreyscale16Ex(System.IntPtr,System.Byte[],System.Byte[],Lumenera.USB.dll.LucamImageFormat,Lumenera.USB.dll.LucamConversionParams)">
            <summary>
            Convert a raw frame to monochrome greyscale format.
            Note that it is not necessary to call this function if the camera is a monochrome camera since the raw data format is already in the appropriate greyscale format.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">Monochrome data. Must be big enough to store the greyscale 16-bit image (width * height).</param>
            <param name="src">Raw data source for the specified pixel format.</param>
            <param name="ifmt">LucamImageFormat describing the raw image format.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
        </member>
        <member name="M:Lumenera.USB.api.ConvertFrameToGreyscale16Ex(System.IntPtr,System.UInt16[],System.UInt16[],Lumenera.USB.dll.LucamImageFormat,Lumenera.USB.dll.LucamConversionParams)">
            <summary>
            Convert a raw frame to monochrome greyscale format.
            Note that it is not necessary to call this function if the camera is a monochrome camera since the raw data format is already in the appropriate greyscale format.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="dst">Monochrome data. Must be big enough to store the greyscale 16-bit image (width * height).</param>
            <param name="src">Raw data source for the specified pixel format.</param>
            <param name="ifmt">LucamImageFormat describing the raw image format.</param>
            <param name="parms">Color converion specification (demosaicing and color correction matrix)</param>
        </member>
        <member name="M:Lumenera.USB.api.GetImageFormat(System.IntPtr)">
            <summary>
            Get the dll.LucamImageFormat settings for the current camera.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.USB.api.GetImageIntensity(System.IntPtr,System.Byte[],Lumenera.USB.dll.LucamImageFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Get the intensity for a region of interest in a raw image frame.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="data">Image buffer.</param>
            <param name="pImageFormat">Image format.</param>
            <param name="x">ROI x offset</param>
            <param name="y">ROI y offset</param>
            <param name="width">ROI width</param>
            <param name="height">ROI width</param>
            <param name="pIntensity">Overall intensity</param>
            <param name="pRedIntensity">Red intensity</param>
            <param name="pGreen1Intensity">Green1 intensity</param>
            <param name="pGreen2Intensity">Green2 intensity</param>
            <param name="pBlueIntensity">Blue intensity</param>
        </member>
        <member name="M:Lumenera.USB.api.GetImageIntensity(System.IntPtr,System.Byte[],Lumenera.USB.dll.LucamImageFormat,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the intensity for a region of interest in a raw image frame.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="data">Image buffer.</param>
            <param name="pImageFormat">Image format.</param>
            <param name="x">ROI x offset</param>
            <param name="y">ROI y offset</param>
            <param name="width">ROI width</param>
            <param name="height">ROI width</param>
            <returns>the intensity of the ROI</returns>
        </member>
        <member name="M:Lumenera.USB.api.GetImageIntensity(System.IntPtr,System.Byte[],Lumenera.USB.dll.LucamImageFormat,Lumenera.Geometry.Rectangle,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Get the intensity for a region of interest in a raw image frame.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="data">Image buffer.</param>
            <param name="pImageFormat">Image format.</param>
            <param name="roi">ROI using a Rectangle object</param>
            <param name="pIntensity">Overall intensity</param>
            <param name="pRedIntensity">Red intensity</param>
            <param name="pGreen1Intensity">Green1 intensity</param>
            <param name="pGreen2Intensity">Green2 intensity</param>
            <param name="pBlueIntensity">Blue intensity</param>
        </member>
        <member name="M:Lumenera.USB.api.GetImageIntensity(System.IntPtr,System.Byte[],Lumenera.USB.dll.LucamImageFormat,Lumenera.Geometry.Rectangle)">
            <summary>
            Get the intensity for a region of interest in a raw image frame.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="data">Image buffer.</param>
            <param name="pImageFormat">Image format.</param>
            <param name="roi">ROI using a Rectangle object</param>
            <returns>the intensity of the ROI</returns>
        </member>
        <member name="M:Lumenera.USB.api.GetFrameRates(System.IntPtr)">
            <summary>
            Get the list of frame rates supported by the specified camera.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>Array of frame rates.</returns>
        </member>
        <member name="M:Lumenera.USB.api.FindClosestFrameRate(System.Single[],System.Double)">
            <summary>
            Find the closest frame rate to the specified target value.
            </summary>
            <param name="frameRates">Available frame rates (e.g. returned by GetFrameRates).</param>
            <param name="target">Target frame rate.</param>
            <returns>Closest frame rate to target.</returns>
        </member>
        <member name="M:Lumenera.USB.api.GetClosestFrameRate(System.IntPtr,System.Double)">
            <summary>
            Get the closest frame rate to the specified target value.
            </summary>
            <param name="hCamera">Lucam API camera handle.</param>
            <param name="target">Target frame rate.</param>
            <returns>Selected frame rate.</returns>
        </member>
        <member name="M:Lumenera.USB.api.SetClosestFrameRate(System.IntPtr,System.Double)">
            <summary>
            Set the closest frame rate to the specified target value.
            </summary>
            <param name="hCamera">Lucam API camera handle.</param>
            <param name="target">Target frame rate.</param>
            <returns>Selected frame rate.</returns>
        </member>
        <member name="M:Lumenera.USB.api.SetMaximumFramerate(System.IntPtr)">
            <summary>
            Set the maximum available framerate.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>The maximum framerate.</returns>
        </member>
        <member name="M:Lumenera.USB.api.GetMaximumFramerate(System.IntPtr)">
            <summary>
            Get the maximum available framerate.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>The maximum framerate.</returns>
        </member>
        <member name="M:Lumenera.USB.api.GetProperty(System.IntPtr,Lumenera.USB.dll.LucamProperty,Lumenera.USB.dll.LucamPropertyFlag@)">
            <summary>
            Read a property value from the camera.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="p">Property value.</param>
            <param name="flags">Property flags (output).</param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.USB.api.GetProperty(System.IntPtr,Lumenera.USB.dll.LucamProperty)">
            <summary>
            Read a property value from the camera.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="p">Property value.</param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.USB.api.SetProperty(System.IntPtr,Lumenera.USB.dll.LucamProperty,System.IConvertible,Lumenera.USB.dll.LucamPropertyFlag)">
            <summary>
            Set a property value in the camera.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="p">Property.</param>
            <param name="v">Property value.</param>
            <param name="f">Property flags.</param>
        </member>
        <member name="M:Lumenera.USB.api.SetProperty(System.IntPtr,Lumenera.USB.dll.LucamProperty,System.IConvertible)">
            <summary>
            Set a property value in the camera.
            Sets property flags to 0.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="p">Property.</param>
            <param name="v">Property value.</param>
        </member>
        <member name="M:Lumenera.USB.api.SetCheckProperty(System.IntPtr,Lumenera.USB.dll.LucamProperty,System.IConvertible,Lumenera.USB.dll.LucamPropertyFlag,System.Double)">
            <summary>
            Set a property value in the camera.
            Properties in the camera may be constrained or have limited granularity.
            This function reads back the actual property value and compares it to the target value.
            An exception is thrown if the actual value is not within a specified percentage of the target value.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="p">Property.</param>
            <param name="v">Property value.</param>
            <param name="f">Property flags.</param>
            <param name="percentage">Percentage tolerance.</param>
            <returns>Actual property value.</returns>
        </member>
        <member name="M:Lumenera.USB.api.SetCheckPropertyAndFlags(System.IntPtr,Lumenera.USB.dll.LucamProperty,System.IConvertible,Lumenera.USB.dll.LucamPropertyFlag,System.Double)">
            <summary>
            Set a property value in the camera.
            Properties in the camera may be constrained or have limited granularity.
            This function reads back the actual property value and compares it to the target value.
            An exception is thrown if the actual value is not within a specified percentage of the target value.
            This function reads back the flags and compares them to the target value.
            An exception is thrown if the actual value is not the same as the target.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="p">Property.</param>
            <param name="v">Property value.</param>
            <param name="f">Property flags.</param>
            <param name="percentage">Percentage tolerance.</param>
            <returns>Actual property value.</returns>
        </member>
        <member name="M:Lumenera.USB.api.SetCheckProperty(System.IntPtr,Lumenera.USB.dll.LucamProperty,System.IConvertible,Lumenera.USB.dll.LucamPropertyFlag)">
            <summary>
            Set a property value in the camera.
            Properties in the camera may be constrained or have limited granularity.
            This function reads back the actual property value and compares it to the target value.
            An exception is thrown if the actual value is not within 5% of the target value.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="p">Property.</param>
            <param name="v">Property value.</param>
            <param name="f">Property flags.</param>
            <returns>Actual property value.</returns>
        </member>
        <member name="M:Lumenera.USB.api.SetCheckProperty(System.IntPtr,Lumenera.USB.dll.LucamProperty,System.IConvertible,System.Double)">
            <summary>
            Set a property value in the camera.
            Properties in the camera may be constrained or have limited granularity.
            This function reads back the actual property value and compares it to the target value.
            An exception is thrown if the actual value is not within a specified percentage of the target value.
            Sets property flags to 0.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="p">Property.</param>
            <param name="v">Property value.</param>
            <param name="percentage">Percentage tolerance.</param>
            <returns>Actual property value.</returns>
        </member>
        <member name="M:Lumenera.USB.api.SetCheckProperty(System.IntPtr,Lumenera.USB.dll.LucamProperty,System.IConvertible)">
            <summary>
            Set a property value in the camera.
            Properties in the camera may be constrained or have limited granularity.
            This function reads back the actual property value and compares it to the target value.
            An exception is thrown if the actual value is not within 5% of the target value.
            Sets property flags to 0.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="p">Property.</param>
            <param name="v">Property value.</param>
            <returns>Actual property value.</returns>
        </member>
        <member name="M:Lumenera.USB.api.SetCheckPropertyAndFlags(System.IntPtr,Lumenera.USB.dll.LucamProperty,System.IConvertible,Lumenera.USB.dll.LucamPropertyFlag)">
            <summary>
            Set a property value in the camera.
            Properties in the camera may be constrained or have limited granularity.
            This function reads back the actual property value and compares it to the target value.
            An exception is thrown if the actual value is not within a specified percentage of the target value.
            This function reads back the flags and compares them to the target value.
            An exception is thrown if the actual value is not the same as the target.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="p">Property.</param>
            <param name="v">Property value.</param>
            <param name="f">Property flags.</param>
            <returns>Actual property value.</returns>
        </member>
        <member name="M:Lumenera.USB.api.GetPropertyFlags(System.IntPtr,Lumenera.USB.dll.LucamProperty)">
            <summary>
            Read the property flags.
            </summary>
            <param name="h">Camera handle.</param>
            <param name="p">Property.</param>
            <returns>Property flags.</returns>
        </member>
        <member name="M:Lumenera.USB.api.SetPropertyFlags(System.IntPtr,Lumenera.USB.dll.LucamProperty,Lumenera.USB.dll.LucamPropertyFlag)">
            <summary>
            Set the property flags.
            </summary>
            <param name="h">Camera handle.</param>
            <param name="p">Property.</param>
            <param name="flags">Property flags.</param>
        </member>
        <member name="M:Lumenera.USB.api.SetCheckPropertyFlags(System.IntPtr,Lumenera.USB.dll.LucamProperty,Lumenera.USB.dll.LucamPropertyFlag)">
            <summary>
            Set and check the property flags.
            </summary>
            <param name="h">Camera handle.</param>
            <param name="p">Property.</param>
            <param name="flags">Property flags.</param> 
        </member>
        <member name="M:Lumenera.USB.api.SetPropertyFlagsOff(System.IntPtr,Lumenera.USB.dll.LucamProperty,Lumenera.USB.dll.LucamPropertyFlag)">
            <summary>
            Reset specific property flags.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="p">Property.</param>
            <param name="f">Property flag(s).</param>
        </member>
        <member name="M:Lumenera.USB.api.SetCheckPropertyFlagsOff(System.IntPtr,Lumenera.USB.dll.LucamProperty,Lumenera.USB.dll.LucamPropertyFlag)">
            <summary>
            Reset and check specific property flags.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="p">Property.</param>
            <param name="f">Property flag(s).</param>
        </member>
        <member name="M:Lumenera.USB.api.SetPropertyFlagsOn(System.IntPtr,Lumenera.USB.dll.LucamProperty,Lumenera.USB.dll.LucamPropertyFlag)">
            <summary>
            Set specific property flags.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="p">Property.</param>
            <param name="f">Property flag(s).</param>
        </member>
        <member name="M:Lumenera.USB.api.SetCheckPropertyFlagsOn(System.IntPtr,Lumenera.USB.dll.LucamProperty,Lumenera.USB.dll.LucamPropertyFlag)">
            <summary>
            Set and check specific property flags.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="p">Property.</param>
            <param name="f">Property flag(s).</param>
        </member>
        <member name="M:Lumenera.USB.api.CheckPropertyFlagsOn(System.IntPtr,Lumenera.USB.dll.LucamProperty,Lumenera.USB.dll.LucamPropertyFlag)">
            <summary>
            Test specific property flags.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="p">Property.</param>
            <param name="f">Property flag(s).</param>
        </member>
        <member name="M:Lumenera.USB.api.CheckPropertyFlagsOff(System.IntPtr,Lumenera.USB.dll.LucamProperty,Lumenera.USB.dll.LucamPropertyFlag)">
            <summary>
            Test specific property flags.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="p">Property.</param>
            <param name="f">Property flag(s).</param>
        </member>
        <member name="M:Lumenera.USB.api.CheckPropertyFlags(System.IntPtr,Lumenera.USB.dll.LucamProperty,Lumenera.USB.dll.LucamPropertyFlag,System.Boolean)">
            <summary>
            Test specific property flags.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="p">Property.</param>
            <param name="f">Property flag(s).</param>
            <param name="state">State to check for</param>
        </member>
        <member name="M:Lumenera.USB.api.IsFormatLittleEndian(System.IntPtr)">
            <summary>
            Determine the endianness of the specified camera handle.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.USB.api.GetPropertyRange(System.IntPtr,Lumenera.USB.dll.LucamProperty)">
            <summary>
            Get the range of values applicable to a camera property.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="p">Property.</param>
            <returns>Property value range.</returns>
        </member>
        <member name="M:Lumenera.USB.api.GetPropertyDefault(System.IntPtr,Lumenera.USB.dll.LucamProperty)">
            <summary>
            Get the default value for a property.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="p">Property.</param>
            <returns>Default.</returns>
        </member>
        <member name="M:Lumenera.USB.api.SetPropertyDefault(System.IntPtr,Lumenera.USB.dll.LucamProperty)">
            <summary>
            Set the default value for a property.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="p">Property.</param> 
        </member>
        <member name="M:Lumenera.USB.api.SetCheckPropertyDefault(System.IntPtr,Lumenera.USB.dll.LucamProperty)">
            <summary>
            Set the default value for a property and check that it is set.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="p">Property.</param> 
        </member>
        <member name="M:Lumenera.USB.api.GetMaxResolution(System.IntPtr)">
            <summary>
            Get the MAX_WIDTH and MAX_HEIGHT properties in a convenient form.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>Maximum resolution of the camera.</returns>
        </member>
        <member name="M:Lumenera.USB.api.GetAperture(System.IntPtr)">
            <summary>
            Get the aperture of the iris as an f/#.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>Aperture.</returns>
        </member>
        <member name="M:Lumenera.USB.api.SetAperture(System.IntPtr,System.Double)">
            <summary>
            Set the aperture of the iris in f stops.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <param name="f">Aperture (in f stops).</param>
        </member>
        <member name="M:Lumenera.USB.api.GetBayerPatternType(System.IntPtr)">
            <summary>
            Get the BayerPatternType.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>BayerPatternType.</returns>
        </member>
        <member name="M:Lumenera.USB.api.GetLucamCorrectionMatrix(System.IntPtr)">
            <summary>
            Get LucamProperty.CORRECTION_MATRIX.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>LucamProperty.CORRECTION_MATRIX</returns>
        </member>
        <member name="M:Lumenera.USB.api.GetLucamDemosaicMethod(System.IntPtr)">
            <summary>
            Get LucamProperty.DEMOSAICING_METHOD.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>LucamProperty.DEMOSAICING_METHOD</returns>
        </member>
        <member name="M:Lumenera.USB.api.GetLucamColorFormat(System.IntPtr)">
            <summary>
            Get LucamProperty.COLOR_FORMAT.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>LucamProperty.DEMOSAICING_METHOD</returns>    
        </member>
        <member name="M:Lumenera.USB.api.CameraOpen(System.Int32)">
            <summary>
            Open a camera.
            </summary>
            <remarks>  
            For LucamExternalInterface.USB2, it forces a reenumeration. 
            So, in that case, it isn't possible to reliably open a specific camera by index.
            In that case, use LucamExternalInterface.USB3 which will also enumerate USB2 devices.
            </remarks>
            <param name="number">Camera number.</param>
            <returns>Camera handle.</returns>
        </member>
        <member name="M:Lumenera.USB.api.CameraOpen(System.String)">
            <summary>
            Open a specific camera by serial number.
            Not guaranteed reliable to use with LucamExternInterface.USB2. Use LucamInterface.USB3 instead.
            </summary>
            <param name="serialNumber"></param>
            <returns>Camera handle.</returns>
        </member>
        <member name="M:Lumenera.USB.api.CameraClose(System.IntPtr)">
            <summary>
            Close a camera.
            </summary>
            <param name="h">Camera handle.</param>
        </member>
        <member name="M:Lumenera.USB.api.CameraReset(System.IntPtr)">
            <summary>
            Reset a camera.
            </summary>
            <param name="h">Camera handle.</param>
        </member>
        <member name="M:Lumenera.USB.api.StreamVideoStart(System.IntPtr)">
            <summary>
            Start a preview video stream.
            </summary>
            <param name="h">Camera handle.</param>
        </member>
        <member name="M:Lumenera.USB.api.StreamVideoStart(System.IntPtr,System.Int32)">
            <summary>
            Start a preview video stream.
            </summary>
            <param name="h">Camera handle.</param>
            <param name="hWnd">Window handle for preview.</param>
        </member>
        <member name="M:Lumenera.USB.api.StreamVideoStart(System.IntPtr,System.IntPtr)">
            <summary>
            Start a preview video stream.
            </summary>
            <param name="h">Camera handle.</param>
            <param name="hWnd">Window handle for preview.</param>
        </member>
        <member name="M:Lumenera.USB.api.StreamVideoStop(System.IntPtr)">
            <summary>
            Stop a preview video stream.
            </summary>
            <param name="h">Camera handle.</param>
        </member>
        <member name="M:Lumenera.USB.api.StreamVideoControl(System.IntPtr,Lumenera.USB.dll.LucamStreamMode,System.IntPtr)">
            <summary>
            Controls the video stream.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="controlType">Control type.</param>
            <param name="hWnd">Window handle.</param>
        </member>
        <member name="M:Lumenera.USB.api.StreamVideoControl(System.IntPtr,Lumenera.USB.dll.LucamStreamMode,System.Int32)">
            <summary>
            Controls the video stream.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="controlType">Control type.</param>
            <param name="hWnd">Window handle.</param>
        </member>
        <member name="M:Lumenera.USB.api.GetStreamVideoState(System.IntPtr)">
            <summary>
            Get the status of the raw video data stream.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns>dll.LucamStreamMode.START_STREAMING or STOP_STREAMING</returns>
            <remarks>Currently no way to determine if the stream is being displayed - i.e. if stream was started with START_DISPLAY.</remarks>
        </member>
        <member name="M:Lumenera.USB.api.IsStreaming(System.IntPtr)">
            <summary>
            Determine if the speccified camera is currently streaming.
            </summary>
            <param name="h">Lucam API camera handle.</param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.USB.api.QueryDisplayFrameRate(System.IntPtr)">
            <summary>
            Returns the actual average displayed frame rate of the camera since previewing was started.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <returns>average frame rate</returns>
        </member>
        <member name="M:Lumenera.USB.api.TakeVideo(System.IntPtr,System.Int32,System.Byte[])">
            <summary>
            Capture a frame from the video image preview. 
            Video preview should be running (see LucamStreamVideoControl()).
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="n">The number of frames to take.</param>
            <param name="buffer">Raw image data byte array (the array must be big enough to store the raw image for the current camera settings).</param>
        </member>
        <member name="M:Lumenera.USB.api.TakeVideo(System.IntPtr,System.Int32,System.UInt16[])">
            <summary>
            Capture a frame from the video image preview. 
            Video preview should be running (see LucamStreamVideoControl()).
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="n">The number of frames to take.</param>
            <param name="buffer">Raw image data ushort array (the array must be big enough to store the raw image for the current camera settings).</param>
        </member>
        <member name="M:Lumenera.USB.api.TakeVideoEx(System.IntPtr,System.Byte[],System.Int32)">
            <summary>
            Capture a frame from the video image preview. 
            Video preview should be running (see LucamStreamVideoControl()).
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="buffer">Raw image data byte array (the array must be big enough to store the raw image for the current camera settings).</param>
            <param name="timeout">Maximum duration to wait for a frame in milliseconds.</param>
            <returns>The number of bytes read</returns>
        </member>
        <member name="M:Lumenera.USB.api.TakeVideoEx(System.IntPtr,System.UInt16[],System.Int32)">
            <summary>
            Capture a frame from the video image preview. 
            Video preview should be running (see LucamStreamVideoControl()).
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="buffer">Raw image data ushort array (the array must be big enough to store the raw image for the current camera settings).</param>
            <param name="timeout">Maximum duration to wait for a frame in milliseconds.</param>
            <returns>The number of bytes read</returns>
        </member>
        <member name="M:Lumenera.USB.api.QueryRgbPreviewPixelFormat(System.IntPtr)">
            <summary>
            Query the pixel format associated with a registered RGB preview callback.
            </summary>
            <param name="hCamera">Camera Handle.</param>
            <returns>the pixel format</returns>
        </member>
        <member name="M:Lumenera.USB.api.AddRgbPreviewCallback(System.IntPtr,Lumenera.USB.dll.LucamRgbPreviewCallback,System.IntPtr,Lumenera.USB.dll.LucamPixelFormat)">
            <summary>
            Register an RGB frame event callback.
            The callback will be called for each frame received from the camera.
            If called after the stream is started the pixel format must match LucamQueryRgbPreviewPixelFormat().
            If called before then it can be any format that is valid for the current pixel depth of the camera.
            If the requested pixel format is not the default value there may be a data copy (minor performance cost).
            Note that the image buffer is upside down and that the color values are in BGR order.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="cb">Callback function.</param>
            <param name="context">Unique identifier passed to the callback function.</param>
            <param name="rgbPixelFormat">Pixel format.</param>
            <returns>Callback ID (for later removal of the callback - see LucamRemoveRgbPreviewCallback()). On error returns -1.</returns>
        </member>
        <member name="M:Lumenera.USB.api.RemoveRgbPreviewCallback(System.IntPtr,System.Int32)">
            <summary>
            Deregister an RGB frame event callback.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="callbackId">Callback ID (returned by LucamAddRgbPreviewCallback()).</param>
        </member>
        <member name="M:Lumenera.USB.api.AddSnapshotCallback(System.IntPtr,Lumenera.USB.dll.LucamStreamingCallback,System.IntPtr)">
            <summary>
            Register a raw snapshot frame event callback.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="cb">Callback function.</param>
            <param name="context">Unique identifier passed to the callback function.</param>
            <returns>Callback ID (for later removal of the callback - see LucamRemoveSnapshotCallback()). On error returns -1.</returns>
        </member>
        <member name="M:Lumenera.USB.api.RemoveSnapshotCallback(System.IntPtr,System.Int32)">
            <summary>
            Deregister a snapshot raw frame event callback.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="callbackId">Callback ID (returned by LucamAddSnapshotCallback()).</param>
        </member>
        <member name="M:Lumenera.USB.api.AddStreamingCallback(System.IntPtr,Lumenera.USB.dll.LucamStreamingCallback,System.IntPtr)">
            <summary>
            Register a raw stream video frame event callback.
            The callback will be called for each frame received from the camera.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="cb">Callback function.</param>
            <param name="context">Unique identifier passed to the callback function.</param>
            <returns>Callback ID (for later removal of the callback - see LucamRemoveRgbPreviewCallback()). On error returns -1.</returns>
        </member>
        <member name="M:Lumenera.USB.api.RemoveStreamingCallback(System.IntPtr,System.Int32)">
            <summary>
            Deregister a steam video raw frame event callback.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="callbackId">Callback ID (returned by LucamAddStreamingPreviewCallback()).</param>
        </member>
        <member name="M:Lumenera.USB.api.TakeSnapshot(System.IntPtr,Lumenera.USB.dll.LucamSnapshot,System.Byte[])">
            <summary>
            Take a single still image using the camera's still imaging mode. If a video preview is active it will be automatically interrupted.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="settings">Snapshot (still) image settings.</param>
            <param name="data">Image raw data byte array.</param>
        </member>
        <member name="M:Lumenera.USB.api.TakeSnapshot(System.IntPtr,Lumenera.USB.dll.LucamSnapshot,System.UInt16[])">
            <summary>
            Take a single still image using the camera's still imaging mode. If a video preview is active it will be automatically interrupted.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="settings">Snapshot (still) image settings.</param>
            <param name="data">Image raw data ushort array.</param>
        </member>
        <member name="M:Lumenera.USB.api.EnableFastFrames(System.IntPtr,Lumenera.USB.dll.LucamSnapshot)">
            <summary>
            Enable fast frames (snapshot)
            </summary>
            <param name="h"></param>
            <param name="ls"></param>
        </member>
        <member name="M:Lumenera.USB.api.FastFramesEnable(System.IntPtr,Lumenera.USB.dll.LucamSnapshot)">
            <summary>
            Enable fast frames (snapshot)
            </summary>
            <param name="h"></param>
            <param name="ls"></param>
        </member>
        <member name="M:Lumenera.USB.api.DisableFastFrames(System.IntPtr)">
            <summary>
            Disable fast frames (snapshot)
            </summary>
            <param name="h"></param>
        </member>
        <member name="M:Lumenera.USB.api.FastFramesDisable(System.IntPtr)">
            <summary>
            Disable fast frames (snapshot)
            </summary>
            <param name="h"></param>
        </member>
        <member name="M:Lumenera.USB.api.TakeFastFrame(System.IntPtr,System.Byte[])">
            <summary>
            Take a snapshot. Must call EnableFastFrames() first.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="data">Image raw data byte array.</param>
        </member>
        <member name="M:Lumenera.USB.api.TakeFastFrame(System.IntPtr,System.UInt16[])">
            <summary>
            Take a snapshot. Must call EnableFastFrames() first.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="data">Image raw data ushort array.</param>
        </member>
        <member name="M:Lumenera.USB.api.SetTriggerMode(System.IntPtr,System.Boolean)">
            <summary>
            Set snapshot trigger mode.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="useHwTrigger">True to use external hardware trigger.</param>
        </member>
        <member name="M:Lumenera.USB.api.OneShotAutoWhiteBalance(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform a one-shot white balance with error checking.
            </summary>
            <param name="h">Camera handle.</param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Lumenera.USB.api.OneShotAutoWhiteBalance(System.IntPtr)">
            <summary>
            Perform a one-shot white balance with error checking.
            </summary>
            <param name="h">Camera handle.</param>
        </member>
        <member name="M:Lumenera.USB.api.OneShotAutoWhiteBalanceEx(System.IntPtr,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform a single white balance adjustment to color gains.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="redOverGreen">Ratio of red relative to green desired in result.</param>
            <param name="blueOverGreen">Ratio or blue relative to green desired in the result.</param>
            <param name="x">Auto white balance window x offset.</param>
            <param name="y">Auto white balance window y offset.</param>
            <param name="width">Auto white balance window width.</param>
            <param name="height">Auto white balance window height.</param>
        </member>
        <member name="M:Lumenera.USB.api.OneShotAutoWhiteBalanceEx(System.IntPtr,System.Double,System.Double,Lumenera.Geometry.Rectangle)">
            <summary>
            Perform a single white balance adjustment to color gains.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="redOverGreen">Ratio of red relative to green desired in result.</param>
            <param name="blueOverGreen">Ratio or blue relative to green desired in the result.</param>
            <param name="roi">Auto white balance window.</param>
        </member>
        <member name="M:Lumenera.USB.api.OneShotAutoExposure(System.IntPtr,System.Double)">
            <summary>
            Perform a one-shot auto exposure with error checking and up to 3 retries.
            </summary>
            <param name="h"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.USB.api.OneShotAutoIris(System.IntPtr,System.Double,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform a single exposure adjustment to reach the specified luminance target as closely as possible.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="target">Luminance target (0-255).</param>
            <param name="x">Auto iris window x offset.</param>
            <param name="y">Auto iris window y offset.</param>
            <param name="width">Auto iris window width.</param>
            <param name="height">Auto iris window height.</param>
        </member>
        <member name="M:Lumenera.USB.api.OneShotAutoIris(System.IntPtr,System.Double,Lumenera.Geometry.Rectangle)">
            <summary>
            Perform a single exposure adjustment to reach the specified luminance target as closely as possible.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="target">Luminance target (0-255).</param>
            <param name="roi">Auto iris window.</param>
        </member>
        <member name="M:Lumenera.USB.api.AdjustWhiteBalance(System.IntPtr,Lumenera.USB.dll.LucamSnapshot,System.Byte[],System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adjust the whitebalance based on a snapshot image.
            </summary>
            <param name="h"></param>
            <param name="settings"></param>
            <param name="data"></param>
            <param name="redOverGreen"></param>
            <param name="blueOverGreen"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Lumenera.USB.api.AdjustWhiteBalance(System.IntPtr,Lumenera.USB.dll.LucamSnapshot,System.Byte[],System.Double,System.Double,Lumenera.Geometry.Rectangle)">
            <summary>
            Adjust the whitebalance based on a snapshot image.
            </summary>
            <param name="h"></param>
            <param name="settings"></param>
            <param name="data"></param>
            <param name="redOverGreen"></param>
            <param name="blueOverGreen"></param>
            <param name="roi"></param>
        </member>
        <member name="M:Lumenera.USB.api.InitAutoLens(System.IntPtr,System.Boolean)">
            <summary>
            Initialize and calibrate the focus and iris positions of the camera lens
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="force">Force a recalibration of the lens (if True)</param>
        </member>
        <member name="M:Lumenera.USB.api.InitAutoLens(System.IntPtr)">
            <summary>
            Initialize the focus and iris positions of the camera lens.
            No recalibration is done.
            </summary>
            <param name="hCamera">Camera handle.</param>
        </member>
        <member name="M:Lumenera.USB.api.AutoFocusStart(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Lumenera.USB.dll.LucamProgressCallback,System.IntPtr)">
            <summary>
            Start an auto focus operation for an ROI.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="x">ROI x offset</param>
            <param name="y">ROI y offset</param>
            <param name="width">ROI width</param>
            <param name="height">ROI height</param>
            <param name="cb">Callback function to receive progress updates.</param>
            <param name="context">Unique identifier passed to the callback function.</param>
        </member>
        <member name="M:Lumenera.USB.api.AutoFocusStart(System.IntPtr,Lumenera.Geometry.Rectangle,Lumenera.USB.dll.LucamProgressCallback,System.IntPtr)">
            <summary>
            Start an auto focus operation for an ROI.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="roi">Rectangle representing ROI and its dimensions</param>
            <param name="cb">Callback function to receive progress updates.</param>
            <param name="context">Unique identifier passed to the callback function.</param>
        </member>
        <member name="M:Lumenera.USB.api.AutoFocusWait(System.IntPtr,System.Int32)">
            <summary>
            Wait for the auto focus operation to finish.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="timeout">How long to wait.</param>
        </member>
        <member name="M:Lumenera.USB.api.AutoFocusStop(System.IntPtr)">
            <summary>
            Stop an auto focus operation.
            </summary>
            <param name="hCamera">Camera handle.</param>
        </member>
        <member name="M:Lumenera.USB.api.AutoFocusQueryProgress(System.IntPtr)">
            <summary>
            Query the progress of an auto focus operation.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <returns>percentage completed</returns>
        </member>
        <member name="M:Lumenera.USB.api.DigitalWhiteBalance(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform whitebalance with digital gains.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="x">x offset of region of interest</param>
            <param name="y">y offset of region of interest</param>
            <param name="width">width of region of interest</param>
            <param name="height">height of region of interest</param>
        </member>
        <member name="M:Lumenera.USB.api.DigitalWhiteBalance(System.IntPtr,Lumenera.Geometry.Rectangle)">
            <summary>
            Perform whitebalance with digital gains.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="roi">region of interest</param>
        </member>
        <member name="M:Lumenera.USB.api.DigitalWhiteBalanceEx(System.IntPtr,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform whitebalance with digital gains.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="redOverGreen">The red/green color ratio to target.</param>
            <param name="blueOverGreen">The blue/green color ration to target.</param>
            <param name="x">x offset of region of interest</param>
            <param name="y">y offset of region of interest</param>
            <param name="width">width of region of interest</param>
            <param name="height">height of region of interest</param>
        </member>
        <member name="M:Lumenera.USB.api.DigitalWhiteBalanceEx(System.IntPtr,System.Double,System.Double,Lumenera.Geometry.Rectangle)">
            <summary>
            Perform whitebalance with digital gains.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="redOverGreen">The red/green color ratio to target.</param>
            <param name="blueOverGreen">The blue/green color ration to target.</param>
            <param name="roi">region of interest</param>
        </member>
        <member name="M:Lumenera.USB.api.PerformDualTapCorrection(System.IntPtr,System.Byte[],Lumenera.USB.dll.LucamImageFormat)">
            <summary>
            Perform dual tap balancing on a raw image buffer.
            The correction is done in situ.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="data">Raw image buffer (must be the correct size for the specified image format).</param>
            <param name="ImageFormat">Image format specification (as returned by LucamGetImageForamt()).</param>
        </member>
        <member name="M:Lumenera.USB.api.PermanentBufferRead(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Read a block of data from the persistent storage area in the camera.
            </summary>
            <param name="h"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.USB.api.PermanentBufferWrite(System.IntPtr,System.Byte[],System.Int32)">
            <summary>
            Write a block of data to the persistent storage area in the camera.
            </summary>
            <param name="h"></param>
            <param name="data"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Lumenera.USB.api.ReadRegister(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Read internal camera registers.
            </summary>
            <param name="hCamera">Camera Handle.</param>
            <param name="address">Register address</param>
            <param name="n">Number of registers to read.</param>
            <returns>internal register value</returns>
        </member>
        <member name="M:Lumenera.USB.api.ReadRegister(System.IntPtr,System.Int32)">
            <summary>
            Read one internal camera register at the address.
            </summary>
            <param name="hCamera">Camera Handle.</param>
            <param name="address">Register address</param>
            <returns>The register value</returns>
        </member>
        <member name="M:Lumenera.USB.api.WriteRegister(System.IntPtr,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Write internal camera register.
            </summary>
            <param name="hCamera">Camera Handle.</param>
            <param name="address">Register address</param>
            <param name="n">Number of registers to write.</param>
            <param name="values">The array containing the register values.</param>
        </member>
        <member name="M:Lumenera.USB.api.WriteRegister(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Write one internal camera register at the address.
            </summary>
            <param name="hCamera">Camera Handle.</param>
            <param name="address">Register address</param>
            <param name="value">The values.</param>
        </member>
        <member name="M:Lumenera.USB.api.SaveImage(System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,System.Byte[],System.String)">
            <summary>
            Save an image to disk in the format according to the filename parameter's file extension (.jpg, .bmp, .tif, .raw).
            </summary>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="data">Image data byte array (the array must be big enough to store the raw image for the current camera settings).</param>
            <param name="filename">The filename to save the image to.</param>
        </member>
        <member name="M:Lumenera.USB.api.SaveImage(Lumenera.Geometry.Size,Lumenera.USB.dll.LucamPixelFormat,System.Byte[],System.String)">
            <summary>
            Save an image to disk in the format according to the filename parameter's file extension (.jpg, .bmp, .tif, .raw).
            </summary>
            <param name="frameSize">The image frame.</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="data">Image data byte array (the array must be big enough to store the raw image for the current camera settings).</param>
            <param name="filename">The filename to save the image to.</param>
        </member>
        <member name="M:Lumenera.USB.api.SaveImage(System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,System.UInt16[],System.String)">
            <summary>
            Save an image to disk in the format according to the filename parameter's file extension (.jpg, .bmp, .tif, .raw).
            </summary>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="data">Image data ushort array (the array must be big enough to store the raw image for the current camera settings).</param>
            <param name="filename">The filename to save the image to.</param>
            <returns>False if there is an error.</returns>
        </member>
        <member name="M:Lumenera.USB.api.SaveImage(Lumenera.Geometry.Size,Lumenera.USB.dll.LucamPixelFormat,System.UInt16[],System.String)">
            <summary>
            Save an image to disk in the format according to the filename parameter's file extension (.jpg, .bmp, .tif, .raw).
            </summary>
            <param name="frameSize">The image frame.</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="data">Image data ushort array (the array must be big enough to store the raw image for the current camera settings).</param>
            <param name="filename">The filename to save the image to.</param>
        </member>
        <member name="M:Lumenera.USB.api.SaveImageEx(System.IntPtr,System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,System.Byte[],System.String)">
            <summary>
            Save an image to disk in the format according to the filename parameter's file extension (.jpg, .bmp, .tif, .raw).
            For LucamPixelFormat.PF_16, uses the endianness according to the camera handle.
            </summary>
            <param name="hCamera">Camera Handle.</param>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="data">Image data byte array (the array must be big enough to store the raw image for the current camera settings).</param>
            <param name="filename">The filename to save the image to.</param>
        </member>
        <member name="M:Lumenera.USB.api.SaveImageEx(System.IntPtr,Lumenera.Geometry.Size,Lumenera.USB.dll.LucamPixelFormat,System.Byte[],System.String)">
            <summary>
            Save an image to disk in the format according to the filename parameter's file extension (.jpg, .bmp, .tif, .raw).
            For LucamPixelFormat.PF_16, uses the endianness according to the camera handle.
            </summary>
            <param name="hCamera">Camera Handle.</param>
            <param name="frameSize">The image frame.</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="data">Image data byte array (the array must be big enough to store the raw image for the current camera settings).</param>
            <param name="filename">The filename to save the image to.</param>
        </member>
        <member name="M:Lumenera.USB.api.SaveImageEx(System.IntPtr,System.Int32,System.Int32,Lumenera.USB.dll.LucamPixelFormat,System.UInt16[],System.String)">
            <summary>
            Save an image to disk in the format according to the filename parameter's file extension (.jpg, .bmp, .tif, .raw).
            For LucamPixelFormat.PF_16, uses the endianness according to the camera handle.
            </summary>
            <param name="hCamera">Camera Handle.</param>
            <param name="width">Width of the image frame (in pixels).</param>
            <param name="height">Height of the image frame (in pixels).</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="data">Image data ushort array (the array must be big enough to store the raw image for the current camera settings).</param>
            <param name="filename">The filename to save the image to.</param>       
        </member>
        <member name="M:Lumenera.USB.api.SaveImageEx(System.IntPtr,Lumenera.Geometry.Size,Lumenera.USB.dll.LucamPixelFormat,System.UInt16[],System.String)">
            <summary>
            Save an image to disk in the format according to the filename parameter's file extension (.jpg, .bmp, .tif, .raw).
            For LucamPixelFormat.PF_16, uses the endianness according to the camera handle.
            </summary>
            <param name="hCamera">Camera Handle.</param>
            <param name="frameSize">The image frame.</param>
            <param name="pf">Pixel format of the raw data buffer.</param>
            <param name="data">Image data ushort array (the array must be big enough to store the raw image for the current camera settings).</param>
            <param name="filename">The filename to save the image to.</param>
        </member>
        <member name="M:Lumenera.USB.api.PreviewAVIOpen(System.String)">
            <summary>
            Open an AVI file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>A handle for subsequent LucamPreviewAVIxxx() calls.</returns>
        </member>
        <member name="M:Lumenera.USB.api.PreviewAVIClose(System.IntPtr)">
            <summary>
            Close a previously opened AVI File.
            </summary>
            <param name="handle">AVI handle returned by LucmPreviewAVIOpen().</param>
        </member>
        <member name="M:Lumenera.USB.api.PreviewAVIControl(System.IntPtr,Lumenera.USB.dll.LucamAviStreamMode,System.Int32)">
            <summary>
            Control AVI playback.
            </summary>
            <param name="handle">AVI handle returned by LucmPreviewAVIOpen().</param>
            <param name="controlType">Streaming option.</param>
            <param name="hWnd">Window handle when starting playback.</param>
        </member>
        <member name="M:Lumenera.USB.api.StreamVideoControlAVI(System.IntPtr,Lumenera.USB.dll.LucamStreamMode,System.String,System.Int32)">
            <summary>
            Controls the recording of the video stream to a file.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="controlType">Control type.</param>
            <param name="fileName">Name of file to record to.</param>
            <param name="hWnd">Window handle.</param>
        </member>
        <member name="M:Lumenera.USB.api.PreviewAVIGetDuration(System.IntPtr)">
            <summary>
            Get the duration of an AVI file.
            </summary>
            <param name="handle">AVI handle returned by LucmPreviewAVIOpen().</param>
            <returns>The duration of the file.</returns>
        </member>
        <member name="M:Lumenera.USB.api.PreviewAVIGetFrameCount(System.IntPtr)">
            <summary>
            Get the frame count of the AVI file.
            </summary>
            <param name="handle">AVI handle returned by LucmPreviewAVIOpen().</param>
            <returns>The number of frames in the AVI file.</returns>
        </member>
        <member name="M:Lumenera.USB.api.PreviewAVIGetFrameRate(System.IntPtr)">
            <summary>
            Get the frame rate of the AVI file.
            </summary>
            <param name="handle">AVI handle returned by LucmPreviewAVIOpen().</param>
            <returns>The frame rate of the AVI file.</returns>
        </member>
        <member name="M:Lumenera.USB.api.PreviewAVIGetPositionTime(System.IntPtr)">
            <summary>
            Get the playback position of an AVI file.
            </summary>
            <param name="handle">AVI handle returned by LucmPreviewAVIOpen().</param>
            <returns>The position.</returns>
        </member>
        <member name="M:Lumenera.USB.api.PreviewAVIGetPositionFrame(System.IntPtr)">
            <summary>
            Get the current position as a frame number.
            </summary>
            <param name="handle">AVI handle returned by LucmPreviewAVIOpen().</param>
            <returns>The current frame number.</returns>
        </member>
        <member name="M:Lumenera.USB.api.PreviewAVISetPositionTime(System.IntPtr,System.TimeSpan)">
            <summary>
            Set the current position by time.
            </summary>
            <param name="handle">AVI handle returned by LucmPreviewAVIOpen().</param>
            <param name="position">The position to set.</param>
        </member>
        <member name="M:Lumenera.USB.api.PreviewAVISetPositionFrame(System.IntPtr,System.Int64)">
            <summary>
            Set the current position by frame number.
            </summary>
            <param name="handle">AVI handle returned by LucmPreviewAVIOpen().</param>
            <param name="frame">The desired frame number.</param>
        </member>
        <member name="M:Lumenera.USB.api.PreviewAVIGetFormat(System.IntPtr,System.Int32@,System.Int32@,Lumenera.USB.dll.LucamAviFileType@,System.Int32@)">
            <summary>
            Returns the AVI file information
            </summary>
            <param name="handle">AVI handle returned by LucmPreviewAVIOpen().</param>
            <param name="width">Width of the image.</param>
            <param name="height">Height of the image.</param>
            <param name="fileType">Type of image.</param>
            <param name="bitDepth">Bit depth of the image.</param>
        </member>
        <member name="M:Lumenera.USB.api.ConvertRawAVIToStdVideo(System.IntPtr,System.String,System.String,Lumenera.USB.dll.LucamAviFileType)">
            <summary>
            Convert an AVI file to another format.
            </summary>
            <param name="hCamera">Camera Handle</param>
            <param name="outputFileName">Output file.</param>
            <param name="inputFileName">Input file.</param>
            <param name="outputType">Type to convert to.</param>
        </member>
        <member name="M:Lumenera.USB.api.AdjustDisplayWindow(System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adjust the display window (created by LucamCreateDisplayWindow(), StreamVideoControl(START_DISPLAY) or StreamVideoStart()).        
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="title">Window title (pertains to LucamCreateDisplayWindow()).</param>
            <param name="x">Origin of the drawing rectangle relative to the top left corner of the window control.</param>
            <param name="y">Origin of the drawing rectangle relative to the top left corner of the window control.</param>
            <param name="width">Width to scale the image to.</param>
            <param name="height">Height to scale the image to.</param>
        </member>
        <member name="M:Lumenera.USB.api.AdjustDisplayWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adjust the display window (created by LucamCreateDisplayWindow(), StreamVideoControl(START_DISPLAY) or StreamVideoStart()).        
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="x">Location of the drawing rectangle relative to the top left corner of the window control. Use (0,0) to display the top left pixel of the image in the top left corner of the image.</param>
            <param name="y">Location of the drawing rectangle.</param>
            <param name="width">Width to scale the image to. Use the image width to display the image at 100%</param>
            <param name="height">Height to scale the image to.</param>  
        </member>
        <member name="M:Lumenera.USB.api.AdjustDisplayWindow(System.IntPtr,System.String,System.Drawing.Rectangle)">
            <summary>
            Adjust the display window (created by LucamCreateDisplayWindow(), StreamVideoControl(START_DISPLAY) or StreamVideoStart()).        
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="title">Window title (pertains to LucamCreateDisplayWindow()).</param>
            <param name="drawingRectangle">
            Drawing rectangle. The Location specifies the top left corner of the drawing rectangle relative
            to the top left corner of the window control. The Size specifies the dimensions to scale the image to.
            </param>
        </member>
        <member name="M:Lumenera.USB.api.AdjustDisplayWindow(System.IntPtr,System.Drawing.Rectangle)">
            <summary>
            Adjust the display window (created by LucamCreateDisplayWindow(), StreamVideoControl(START_DISPLAY) or StreamVideoStart()).        
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="drawingRectangle">
            Display rectangle. The Location specifies the top left corner of the drawing rectangle relative
            to the top left corner of the window control. The Size specifies the dimensions to scale the image to.
            </param>
        </member>
        <member name="M:Lumenera.USB.api.AdjustDisplayWindow(System.IntPtr,System.String,System.Drawing.Point,System.Drawing.Size)">
            <summary>
            Adjust the display window (created by LucamCreateDisplayWindow(), StreamVideoControl(START_DISPLAY) or StreamVideoStart()).        
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="title">Window title (pertains to LucamCreateDisplayWindow()).</param>
            <param name="drawingLocation">
            The top left corner of the drawing rectangle relative to the top left corner of the window control.
            Use (0,0) to display the top left pixel of the image in the top left corner of the image.
            </param>      
            <param name="drawingSize">The dimensions to scale the image to. Use the image size to display at 100%.</param>       
        </member>
        <member name="M:Lumenera.USB.api.AdjustDisplayWindow(System.IntPtr,System.Drawing.Point,System.Drawing.Size)">
            <summary>
            Adjust the display window (created by LucamCreateDisplayWindow(), StreamVideoControl(START_DISPLAY) or StreamVideoStart()).        
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="drawingLocation">
            The top left corner of the drawing rectangle relative to the top left corner of the window control.
            Use (0,0) to display the top left pixel of the image in the top left corner of the image.
            </param>      
            <param name="drawingSize">The dimensions to scale the image to. Use the image size to display at 100%.</param>       
        </member>
        <member name="M:Lumenera.USB.api.AdjustDisplayWindow(System.IntPtr,System.String,System.Int32,System.Int32,System.Double)">
            <summary>
            Adjust the display window (created by LucamCreateDisplayWindow(), StreamVideoControl(START_DISPLAY) or StreamVideoStart()).        
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="title">Window title (pertains to LucamCreateDisplayWindow()).</param>
            <param name="x">The pixel coordinate to be displayed at the top left corner of the window.</param>      
            <param name="y">The pixel coordinate to be displayed at the top left corner of the window.</param>      
            <param name="zoomFactor">The zoom factor (1.0 is 1:1).</param>
        </member>
        <member name="M:Lumenera.USB.api.AdjustDisplayWindow(System.IntPtr,System.Int32,System.Int32,System.Double)">
            <summary>
            Adjust the display window (created by LucamCreateDisplayWindow(), StreamVideoControl(START_DISPLAY) or StreamVideoStart()).        
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="x">The pixel coordinate to be displayed at the top left corner of the window.</param>      
            <param name="y">The pixel coordinate to be displayed at the top left corner of the window.</param>      
            <param name="zoomFactor">The zoom factor (1.0 is 1:1).</param>
        </member>
        <member name="M:Lumenera.USB.api.AdjustDisplayWindow(System.IntPtr,System.String,Lumenera.Geometry.Point,System.Double)">
            <summary>
            Adjust the display window (created by LucamCreateDisplayWindow(), StreamVideoControl(START_DISPLAY) or StreamVideoStart()).        
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="title">Window title (pertains to LucamCreateDisplayWindow()).</param>
            <param name="location">The pixel coordinate to be displayed at the top left corner of the window.</param>      
            <param name="zoomFactor">The zoom factor (1.0 is 1:1).</param>   
        </member>
        <member name="M:Lumenera.USB.api.AdjustDisplayWindow(System.IntPtr,Lumenera.Geometry.Point,System.Double)">
            <summary>
            Adjust the display window (created by LucamCreateDisplayWindow(), StreamVideoControl(START_DISPLAY) or StreamVideoStart()).        
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="location">The pixel coordinate to be displayed at the top left corner of the window.</param>      
            <param name="zoomFactor">The zoom factor (1.0 is 1:1).</param>   
        </member>
        <member name="M:Lumenera.USB.api.CreateDisplayWindow(System.IntPtr,System.String,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a display window.
            The window is managed by the API.
            It can be destroyed by calling LucamDestroyDisplayWindow().
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="title">Window title.</param>
            <param name="dwStyle">Window style.</param>
            <param name="x">x offset (pan) of leftmost displayed pixel.</param>
            <param name="y">y offset (pan) of topmost displayed pixel.</param>
            <param name="width">Number of pixels to display in the window (zoom).</param>
            <param name="height">Number of pixels to display in the window (zoom).</param>
            <param name="parentId">Parent window ID.</param>
            <param name="childId">Child menu ID.</param>
        </member>
        <member name="M:Lumenera.USB.api.CreateDisplayWindow(System.IntPtr,System.String,System.UInt32,Lumenera.Geometry.Rectangle,System.Int32,System.Int32)">
            <summary>
            Create a display window.
            The window is managed by the API.
            It can be destroyed by calling LucamDestroyDisplayWindow().
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="title">Window title.</param>
            <param name="dwStyle">Window style.</param>
            <param name="roi">Region of interest.</param>
            <param name="parentId">Parent window ID.</param>
            <param name="childId">Child menu ID.</param>
        </member>
        <member name="M:Lumenera.USB.api.DestroyDisplayWindow(System.IntPtr)">
            <summary>
            Destroys the display window created by LucamCreateDisplayWindow().
            </summary>
            <param name="hCamera">Camera handle.</param>
        </member>
        <member name="M:Lumenera.USB.api.DisplayPutMessageDrain(System.IntPtr,System.IntPtr)">
            <summary>
            Send preview window mouse events to the application. Must be called each time display is started
            with StreamVideoStart().
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="hWnd">Window handle used in LucamStreamVideoControl() to start the preview display.</param>
        </member>
        <member name="M:Lumenera.USB.api.DisplayPutMessageDrain(System.IntPtr,System.Int32)">
            <summary>
            Send preview window mouse events to the application. Must be called each time display is started
            with StreamVideoStart().
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="hWnd">Window handle used in LucamStreamVideoControl() to start the preview display.</param>
        </member>
        <member name="M:Lumenera.USB.api.DisplayPropertyPage(System.IntPtr,System.Int32)">
            <summary>
            Display DirectX Property page
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="parentWnd">Window handle of parent window.</param>
        </member>
        <member name="M:Lumenera.USB.api.DisplayVideoFormatPage(System.IntPtr,System.Int32)">
            <summary>
            Display DirectX Video Format page
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="parentWnd">Window handle of parent window.</param>
        </member>
        <member name="M:Lumenera.USB.api.GpioConfigure(System.IntPtr,System.Byte)">
            <summary>
            Configure direction of General Purpose I/O bits.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="enableOutput">Bit flags corresponding to settings for each General Purpose Output. A bit value of 1 means output.</param>
        </member>
        <member name="M:Lumenera.USB.api.GpioRead(System.IntPtr,System.Byte@,System.Byte@)">
            <summary>
            Read the state of the General Purpose I/O registers.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="gpo">General Purpose Output bit values.</param>
            <param name="gpi">General Purpose Input bit values.</param>
        </member>
        <member name="M:Lumenera.USB.api.GpioRead(System.IntPtr)">
            <summary>
            Read the state of the General Purpose I/O registers.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <returns>byte array holding GPIO registers</returns>
        </member>
        <member name="M:Lumenera.USB.api.GpioWrite(System.IntPtr,System.Byte)">
            <summary>
            Manually modify the state of General Purpose Outputs. Note that GPO bits must be enable to use this function via LucamGpoSelect().
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="gpo">General Purpose Outputs.</param>
        </member>
        <member name="M:Lumenera.USB.api.GpoSelect(System.IntPtr,System.Byte)">
            <summary>
            Configure the alternate General Purpose Output mode.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="gpoEnable">Bit flags corresponding to settings for each General Purpose Output. A bit value of 1 means the bit can be controlled via LucamGpioWrite().</param>
        </member>
        <member name="M:Lumenera.USB.api.GetCurrentMatrix(System.IntPtr)">
            <summary>
            Get the current color correction  matrix.
            </summary>
            <param name="hCamera">Camera handle</param>
            <returns>3x3 color correction matrix.</returns>
        </member>
        <member name="M:Lumenera.USB.api.SetupCustomMatrix(System.IntPtr,System.Single[])">
            <summary>
            Setup a custom color correction matrix.
            </summary>
            <param name="hCamera">Camera handle</param>
            <param name="matrix">3x3 color correction matrix.</param>
        </member>
        <member name="M:Lumenera.USB.api.EnableSynchronousSnapshots(System.Int32,System.IntPtr[],Lumenera.USB.dll.LucamSnapshot[])">
            <summary>
            Set up synchronous snapshots.
            </summary>
            <param name="numberOfCameras">The number of cameras to synchronize.</param>
            <param name="handles">Array of camera handles.</param>
            <param name="settings">Array of LucamSnapshot structs.</param>
            <returns>synchronous snapshot handle (for use with TakySyncSnapshots).</returns>
        </member>
        <member name="M:Lumenera.USB.api.TakeSynchronousSnapshots(System.Int32,System.Byte[][])">
            <summary>
            Take synchronous snapshots.
            </summary>
            <param name="syncSnapshotHandle">Synchronous snapshot handle (from EnableSyncSnapshots).</param>
            <param name="buffers">
            Array of raw image buffers for the snapshot images. 
            These buffers must correspond in size to the LucamFrameFormat for that camera. 
            The byte[][] type is a sparse array (an array of arrays) which requires that each of the first dimension (leftmost index)
            be initialized with a byte array (e.g. new byte[imageSize]). This approach allows the buffers to vary in size according to
            the camera type and settings in use for each camera.
            </param>
        </member>
        <member name="M:Lumenera.USB.api.DisableSynchronousSnapshots(System.Int32)">
            <summary>
            Release the synchronous snapshot handle.
            </summary>
            <param name="syncSnapshotHandle">Synchronous snapshot handle (from EnableSyncSnapshots).</param>
        </member>
        <member name="M:Lumenera.USB.api.BuildHighResImageEx(System.IntPtr,Lumenera.USB.dll.LucamFrameFormat,System.Int32,Lumenera.USB.dll.LucamDeltaPixMode,System.Int32)">
            <summary>
            Build a high resolution RGB image.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="format">A frame format structure as returned by LucamGetFormat().</param>
            <param name="bufferSize">The buffer size must be big enough for the high res image (24bpp).</param>
            <param name="dp">Converion mode. Note that this determines the output image resolution.</param>
            <param name="unused"></param>
        </member>
        <member name="M:Lumenera.USB.api.BuildHighResImageEx(System.IntPtr,Lumenera.USB.dll.LucamFrameFormat,Lumenera.USB.dll.LucamDeltaPixMode)">
            <summary>
            Build a high resolution RGB image.
            </summary>
            <param name="hCamera">Camera handle.</param>
            <param name="format">A frame format structure as returned by LucamGetFormat().</param>
            <param name="dp">Converion mode. Note that this determines the output image resolution.</param>
        </member>
        <member name="M:Lumenera.USB.api.GetIPConfiguration(System.Int32)">
            <summary>
            Get the IP configuration of a camera and its host.
            </summary>
            <param name="index">Index of the camera.</param>
            <returns>Returns a LgcamIPConfiguration structure that holds the mac addresses 
            and IP information for the camera and host.</returns>
        </member>
        <member name="M:Lumenera.USB.api.SetIPConfiguration(System.Int32,System.Net.IPAddress,System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Set the IP configuration of a camera.
            </summary>
            <param name="index">Index of the camera.</param>
            <param name="IPAddress">The IP address of the camera.</param>
            <param name="SubnetMask">The Subnet Mask of the camera.</param>
            <param name="DefaultGateway">The Default Gateway of the camera.</param>
        </member>
        <member name="T:Lumenera.USB.api.LgcamIPConfiguration">
            <summary>
            Structure containing mac addresses of the camera and host computer, and their IP configurations.
            </summary>
        </member>
        <member name="F:Lumenera.USB.api.LgcamIPConfiguration.cameraMac">
            <summary>
            The mac address of the camera.
            </summary>
        </member>
        <member name="F:Lumenera.USB.api.LgcamIPConfiguration.hostMac">
            <summary>
            The mac address of the host computer.
            </summary>
        </member>
        <member name="F:Lumenera.USB.api.LgcamIPConfiguration.cameraIPAddress">
            <summary>
            The IP address of the camera.
            </summary>
        </member>
        <member name="F:Lumenera.USB.api.LgcamIPConfiguration.cameraSubnetMask">
            <summary>
            The SubnetMask of the camera.
            </summary>
        </member>
        <member name="F:Lumenera.USB.api.LgcamIPConfiguration.cameraDefaultGateway">
            <summary>
            The DefaultGateway of the camera.
            </summary>
        </member>
        <member name="F:Lumenera.USB.api.LgcamIPConfiguration.hostIPAddress">
            <summary>
            The IP address of the host.
            </summary>
        </member>
        <member name="F:Lumenera.USB.api.LgcamIPConfiguration.hostSubnetMask">
            <summary>
            The SubnetMask of the host.
            </summary>
        </member>
        <member name="F:Lumenera.USB.api.LgcamIPConfiguration.hostDefaultGateway">
            <summary>
            The DefaultGateway of the host.
            </summary>
        </member>
        <member name="T:Lumenera.Geometry.Rectangle">
            <summary>
            Defines a rectangular object in 2D Euclidean geometry.
            </summary>
        </member>
        <member name="M:Lumenera.Geometry.Rectangle.#ctor">
            <summary>
            Zero argument constructor.
            </summary>
        </member>
        <member name="M:Lumenera.Geometry.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a Rectangle with the given coordinates and dimensions.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:Lumenera.Geometry.Rectangle.#ctor(Lumenera.Geometry.Point,Lumenera.Geometry.Size)">
            <summary>
            Create a Rectangle with the given coordinates and dimensions.
            </summary>
            <param name="p"></param>
            <param name="s"></param>
        </member>
        <member name="M:Lumenera.Geometry.Rectangle.#ctor(Lumenera.Geometry.Size,Lumenera.Geometry.Size)">
            <summary>
            Create a Rectangle with the given coordinates and dimensions.
            </summary>
            <param name="p"></param>
            <param name="s"></param>
        </member>
        <member name="M:Lumenera.Geometry.Rectangle.#ctor(Lumenera.Geometry.Size)">
            <summary>
            Create a Rectangle with the given size (assumes an origin of 0,0).
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Lumenera.Geometry.Rectangle.#ctor(Lumenera.Geometry.Rectangle)">
            <summary>
            Clone a Rectangle.
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:Lumenera.Geometry.Rectangle.#ctor(System.Drawing.Rectangle)">
            <summary>
            Copy a System.Drawing.Rectangle.
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:Lumenera.Geometry.Rectangle.op_Equality(Lumenera.Geometry.Rectangle,Lumenera.Geometry.Rectangle)">
            <summary>
            Compare two objects by value.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Rectangle.op_Inequality(Lumenera.Geometry.Rectangle,Lumenera.Geometry.Rectangle)">
            <summary>
            Compare two objects by value.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Rectangle.op_Implicit(Lumenera.Geometry.Rectangle)~System.Drawing.Rectangle">
            <summary>
            Implicitly convert a Rectangle to a System.Drawing.Rectangle so it can be passed transparently to System.Drawing functions.
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Rectangle.ToString">
            <summary>
            Format a user readable string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Rectangle.Equals(System.Object)">
            <summary>
            Compare this object with another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Rectangle.GetHashCode">
            <summary>
            Calculate a hash value for this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Rectangle.Deflate(Lumenera.Geometry.Margin)">
            <summary>
            Deflate a rectangle by the specified margins.
            </summary> 
        </member>
        <member name="M:Lumenera.Geometry.Rectangle.IntersectsWith(Lumenera.Geometry.Rectangle)">
            <summary>
            Determine if this rectangle intersects another rectangle.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Rectangle.Contains(Lumenera.Geometry.Point)">
            <summary>
            Deterimine if this rectangle contains a point.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Rectangle.Distance(Lumenera.Geometry.Rectangle)">
            <summary>
            Calculate the closest distance between two rectangles.
            </summary>
            <param name="r2"></param>
            <returns></returns>
        </member>
        <member name="P:Lumenera.Geometry.Rectangle.X">
            <summary>
            The x coodinate of the top left corner.
            </summary>
        </member>
        <member name="P:Lumenera.Geometry.Rectangle.Y">
            <summary>
            The y coordinate of the top left corner.
            </summary>
        </member>
        <member name="P:Lumenera.Geometry.Rectangle.Width">
            <summary>
            The width.
            </summary>
        </member>
        <member name="P:Lumenera.Geometry.Rectangle.Height">
            <summary>
            THe height.
            </summary>
        </member>
        <member name="P:Lumenera.Geometry.Rectangle.Location">
            <summary>
            The location (x,y).
            </summary>
        </member>
        <member name="P:Lumenera.Geometry.Rectangle.Size">
            <summary>
            The size (width, height).
            </summary>
        </member>
        <member name="P:Lumenera.Geometry.Rectangle.Top">
            <summary>
            The top (y).
            </summary>
        </member>
        <member name="P:Lumenera.Geometry.Rectangle.Bottom">
            <summary>
            The bottom (y + height).
            </summary>
        </member>
        <member name="P:Lumenera.Geometry.Rectangle.Left">
            <summary>
            The left (x).
            </summary>
        </member>
        <member name="P:Lumenera.Geometry.Rectangle.Right">
            <summary>
            The right (x + width).
            </summary>
        </member>
        <member name="P:Lumenera.Geometry.Rectangle.Center">
            <summary>
            Find the geometric center.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Lumenera.Geometry.Rectangle.Area">
            <summary>
            Calculate the area of a Rectangle.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Lumenera.Geometry.Size">
            <summary>
            Defines the size of a rectangular object in 2D Euclidean Geometry.
            </summary>
            <remarks>A struct so that we can use explicit layout. Also, don't anticipate needing to subclass.</remarks>
        </member>
        <member name="F:Lumenera.Geometry.Size.Empty">
            <summary>
            An empty (uninitialized object).
            </summary>
        </member>
        <member name="M:Lumenera.Geometry.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a Size with the given width and height.
            </summary>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:Lumenera.Geometry.Size.#ctor(System.Double,System.Double)">
            <summary>
            Create a Size with the given width and height, rounded to the nearest integer.
            </summary>
            <param name="w"></param>
            <param name="h"></param>  
        </member>
        <member name="M:Lumenera.Geometry.Size.#ctor(System.Drawing.Size)">
            <summary>
            Create a Size from a System.Drawing.Size.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Lumenera.Geometry.Size.op_Addition(Lumenera.Geometry.Size,Lumenera.Geometry.Size)">
            <summary>
            Add a size to another size.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Size.op_Addition(Lumenera.Geometry.Size,System.Drawing.Size)">
            <summary>
            Add a size to another size.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Size.op_Subtraction(Lumenera.Geometry.Size,Lumenera.Geometry.Size)">
            <summary>
            Subtract a size from another size.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Size.op_Subtraction(Lumenera.Geometry.Size,System.Drawing.Size)">
            <summary>
            Subtract a size from another size.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>   
        </member>
        <member name="M:Lumenera.Geometry.Size.op_Subtraction(Lumenera.Geometry.Size,Lumenera.Geometry.Margin)">
            <summary>
            Subtract a Margin's size from a Size.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Size.op_Subtraction(Lumenera.Geometry.Size,System.Windows.Forms.Padding)">
            <summary>
            Subtract a Margin's size from a Size.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Size.op_Subtraction(System.Drawing.Size,Lumenera.Geometry.Size)">
            <summary>
            Subtract a size from another size.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>  
        </member>
        <member name="M:Lumenera.Geometry.Size.op_Addition(System.Drawing.Size,Lumenera.Geometry.Size)">
            <summary>
            Add a size to another size.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Size.op_Multiply(Lumenera.Geometry.Size,System.Double)">
            <summary>
            Multiply the height and width by a value.
            </summary>
            <param name="size"></param>
            <param name="multiplier"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Size.op_Multiply(System.Double,Lumenera.Geometry.Size)">
            <summary>
            Multiply the height and width by a value.
            </summary>
            <param name="size"></param>
            <param name="multiplier"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Size.op_Division(Lumenera.Geometry.Size,System.Double)">
            <summary>
            Divide the height and width by a value.
            </summary>
            <param name="size"></param>
            <param name="divisor"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Size.op_Equality(Lumenera.Geometry.Size,Lumenera.Geometry.Size)">
            <summary>
            Compare two objects by value.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Size.op_Inequality(Lumenera.Geometry.Size,Lumenera.Geometry.Size)">
            <summary>
            Compare two objects by value.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Size.op_Implicit(Lumenera.Geometry.Size)~System.Drawing.Size">
            <summary>
            Implicitly convert a Size to a System.Drawing.Size so it can be passed transparently to System.Drawing functions.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Size.ToString">
            <summary>
            Format a user readable string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Size.Format">
            <summary>
            Format a user readable string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Size.Equals(System.Object)">
            <summary>
            Compare this object with another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.Geometry.Size.GetHashCode">
            <summary>
            Calculate a hash value for this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Lumenera.Geometry.Size.Width">
            <summary>
            The width.
            </summary>
        </member>
        <member name="P:Lumenera.Geometry.Size.Height">
            <summary>
            THe height.
            </summary>
        </member>
        <member name="P:Lumenera.Geometry.Size.IsEmpty">
            <summary>
            Check for an ininitialized Size (since it is a value object).
            </summary>
        </member>
        <member name="P:Lumenera.Geometry.Size.Center">
            <summary>
            Find the center of a rectangular area with this Size.
            </summary>
            <returns></returns>
            <remarks>Note that this would more conveniently be a property but that we can have extension properties.</remarks>
        </member>
        <member name="P:Lumenera.Geometry.Size.Area">
            <summary>
            Calculate the area of a rectangular area with this size.
            </summary>
            <returns></returns>
            <remarks>Note that this would more conveniently be a property but that we can have extension properties.</remarks>
        </member>
        <member name="M:Lumenera.ExtensionMethods.Format(System.Drawing.Color)">
            <summary>
            Format just the color information unlike ToString() which also formats the alpha channel value.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:Lumenera.USB.SimpleStreamingVideoPanel">
            <summary>
            A VideoPanel that supports DirectX drawing from the LuCamApi. The main task is synchronizing the
            DirectX drawing area with the VideoBox control. Assigning a static image to Image automatically
            suppresses the live preview.
            </summary>
        </member>
        <member name="T:Lumenera.VideoPanel">
            <summary>
            A container for a VideoBox to provide scroll bars and scrolling related features.
            - comprehensive zoom, pan options (drag pan, key pan, mousewheel zoom, key zoom, context menu)
            - custom cursor while mouse is over image.
            </summary>
        </member>
        <member name="M:Lumenera.VideoPanel.ZoomToWindow">
            <summary>
            Set the ZoomFactor to display the full image (retaining it's aspect ratio).
            </summary>
        </member>
        <member name="M:Lumenera.VideoPanel.MouseToImagePosition(System.Drawing.Point)">
            <summary>
            Translate mouse coordinates to image coordinates.
            </summary>
            <param name="position">Mouse position.</param>
            <returns>Image position.</returns>
        </member>
        <member name="M:Lumenera.VideoPanel.RefreshImage">
            <summary>
            Refresh the image without invalidating the rest of the VideoPanel.
            </summary>
        </member>
        <member name="F:Lumenera.VideoPanel.processing">
            <summary>
            Processing of Windows messages is synchronous (single thread) but not guaranteed to be in a certain order.
            When the events happen slowly the cascade of events for one zoom/scroll step get a chance to complete before
            the next one starts. If they happen faster (autorepeat keystrokes, fast mouse wheel) a message from a
            subsequent repeat may be processed before processing of the current repeat is finished. 
            </summary>
        </member>
        <member name="M:Lumenera.VideoPanel.applyZoom(System.Double,Lumenera.Geometry.Point)">
            <summary>
            Zoom keeping specified point at the same mouse coordinates.
            </summary>
            <param name="zoom"></param>
            <param name="p"></param>
        </member>
        <member name="M:Lumenera.VideoPanel.ScrollToControl(System.Windows.Forms.Control)">
            <summary>
            Stop the active control from jumping to (0,0) when the form gains control.
            This was also a bitch to figure out. I ended up overriding everything that sounded like it might happen when a form gains focus till I found out which fn was responsible.
            </summary>
            <param name="activeControl"></param>
            <returns></returns>
        </member>
        <member name="F:Lumenera.VideoPanel.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Lumenera.VideoPanel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Lumenera.VideoPanel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Lumenera.VideoPanel.DrawingRectangle">
            <summary>
            The drawing area relative to the internal VideoBox client area (which scales according to the 
            SizeMode and ZoomFactor). In combination with ImageSize, determines everything about 
            drawing the image and annotation on image overlays.
            See also DrawingOrigin, DrawingZoomX, DrawingZoomY.
            </summary>
        </member>
        <member name="P:Lumenera.VideoPanel.DrawingOrigin">
            <summary>
            The drawing origin relative to the internal VideoBox client area. Typically used with
            DrawingZoomX and DrawingZoomY by application software to align drawing of image annotation
            with the iamge.
            </summary>
        </member>
        <member name="P:Lumenera.VideoPanel.DrawingZoomX">
            <summary>
            The effective X zoom ratio for all SizeModes. The X and Y zoom ratio is the same for all
            SizeModes except StretchImage. Typically used with DrawingOrigin and DrawingZoomY by 
            application software to align drawing of image annotation with the iamge.
            </summary>
        </member>
        <member name="P:Lumenera.VideoPanel.DrawingZoomY">
            <summary>
            The effective Y zoom ratio for all SizeModes. The X and Y zoom ratio is the same for all
            SizeModes except StretchImage. Typically used with DrawingOrigin and DrawingZoomX by 
            application software to align drawing of image annotation with the iamge.
            </summary>
        </member>
        <member name="M:Lumenera.OverlayVideoPanel.OnPaintSetInitialPosition(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Initialize the FormMove event handler.
            </summary>
        </member>
        <member name="E:Lumenera.OverlayVideoPanel.PaintOverlay">
            <summary>
            	<para>Paint function for overlay annotation. Note that the drawing origin is automatically adjusted to match the top, left corner
            of the image for all SizeModes. The paint function needs to handle the DisplayZoomZ and DisplayZoomY. Note that the
            overlay is not automatically cleared. Normally, the first action in the paint function should be to clear it.</para>
            	<code><![CDATA[e.Graphics.Clear(System.Color.Transparent);]]></code>
            </summary>
        </member>
        <member name="M:Lumenera.USB.SimpleStreamingVideoPanel.Attach(System.IntPtr)">
            <summary>
            Bind the camera to the video panel.
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:Lumenera.USB.SimpleStreamingVideoPanel.Start(System.IntPtr)">
            <summary>
            Rebind the camera to the video panel, e.g. after a disconnect or change in format.
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:Lumenera.ImageStream.#ctor">
            <summary>
            Open an ImageStream for synchronous image processing via SynchronousProcessingFunctions(ImageProcessingFunction).
            </summary>
        </member>
        <member name="M:Lumenera.ImageStream.RegisterWinFormSafeHandler(System.Windows.Forms.Control,Lumenera.ImageStream.FrameProcessingFunction)">
            <summary>
            Open an ImageStream for safe asynchronous WinForms image processing.
            </summary>       
            <remarks>
            The FrameProcessingFunction will run in the WinForms GUI thread and does
            not need to worry about any thread safety issues.
            </remarks>
            <param name="c">A control that can be used as the target of Invoke().</param>
            <param name="h">The asynchronous frame handler. </param>
        </member>
        <member name="M:Lumenera.ImageStream.RegisterAPIThreadHandler(Lumenera.ImageStream.FrameProcessingFunction)">
            <summary>
            Open an ImageStream for synchronous image processing.
            The FrameProcessingFunction runs in the API thread and must be written
            in a threadsafe manner. It cannot interact directly with a WinForms GUI.
            </summary>
        </member>
        <member name="M:Lumenera.ImageStream.DoFrame(Lumenera.ImageEncoding,System.Object,System.Int32,System.IntPtr)">
            <summary>
            Invoke an image frame to the delegate provided in the constructor. 
            Calculate the effective framerate.
            Delivery is asynchronous. All implementations of LiveImageStream must support locking of the data buffers
            via HoldFrame() and ReleaseFrame() or by copying the data buffer. Subsequent frames will be ignored until
            the asyncronous delegate completes.
            </summary>
            <param name="t">FrameType of the image data.</param>
            <param name="image">The image object of the indicated image type.</param>
            <param name="size">Size (in bytes) of the image data.</param>
            <param name="resource">Resource identifier later passed to DisposeFrame().</param>
        </member>
        <member name="P:Lumenera.ImageStream.IsAsynchronousDataReadWrite">
            <summary>
            Is the asynchronous data buffer a pipeline buffer that supports altering (filtering) the data input to the next stage of the processing pipeline.
            </summary>
        </member>
        <member name="P:Lumenera.ImageStream.IsSynchronousDataReadWrite">
            <summary>
            Is the synchronous data buffer a pipeline buffer that supports altering (filtering) the data input to the next stage of the processing pipeline.
            </summary>
        </member>
        <member name="P:Lumenera.ImageStream.SynchronousFrameHandler">
            <summary>
            Raw processing function. Runs in the context of the raw stream which may be a different thread than the GUI so not allowed to interact directly with GUI.
            Processing will affect the framerate if it isn't finished when the next frame is ready.
            Useful when there are calculations that need to be done at the full framerate and the asynchronous processing might take too much time to be
            performed on every frame.
            </summary>
        </member>
        <member name="P:Lumenera.ImageStream.SynchronousProcessingFunctions">
            <summary>
            Image Processing Functions that will be run in order.
            </summary>
        </member>
        <member name="P:Lumenera.ImageStream.PreviousImage">
            <summary>
            The previous image (for time variant measurements.)
            </summary>
        </member>
        <member name="P:Lumenera.ImageStream.SavePreviousImage">
            <summary>
            An option to control whether or not PreviousImage is supported.
            Turning this option off saves an image copy per frame.
            </summary>
        </member>
        <member name="T:Lumenera.USB.RgbPreviewImagePtrStream">
            <summary>
            Supports data analysis and image filters.
            Like Lumenera.USB.dll.LucamAddRgbPreviewCallback, this is Windows BGR format, last row first.
            </summary>
        </member>
        <member name="T:Lumenera.USB.StreamingImagePtrStream">
            <summary>
            Supports image filters (writable) and zero copies.
            </summary>
        </member>
        <member name="T:Lumenera.VideoBox">
            <summary>
            An extended PictureBox with the following features:
            - Zoom (in AutoSize mode).
            - Uses blocky pixels so individual pixels can be observed at high zoom ratios and
              high quality interpolation for zoom &lt; 1 for good image rendering, even of raw bayer images.
            - Optimized for frequent Image updates (e.g. a video stream).
            - Fixes bugs in PictureBox painting, particularly with high resolution images.
            - Adds MouseImageMove to give the coordinate under the mouse while moving.
            - Adds MouseImageEnter/Leave for when the mouse enters/leaves the image.
            
            To get scrollbars, put a VideoBox/PictureBox in a Panel, use AutoSize mode, set panel to AutoScroll.
            </summary>
        </member>
        <member name="M:Lumenera.VideoBox.MouseToImagePosition(System.Drawing.Point)">
            <summary>
            Translate client rectangle location to image coordinates.
            </summary>
            <param name="position">Mouse position.</param>
            <returns>Image position.</returns>
        </member>
        <member name="M:Lumenera.VideoBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Buffering inside the PictureBox paint code can fail with large images/zoom factors.
            Just draw the image by brute force when this happens. 
            Note that turning off double buffering seems to prevent this error from happening.
            </summary>
            <param name="m"></param>
        </member>
        <member name="F:Lumenera.VideoBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Lumenera.VideoBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Lumenera.VideoBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Lumenera.VideoBox.ZoomFactor">
            <summary>
            Zoom factor for AutoSize mode.
            </summary>
        </member>
        <member name="P:Lumenera.VideoBox.ImageSize">
            <summary>
            Size of Image or, in the absence of an image (Image is null), a size provided
            by the application, for example, when DirectX is drawing the image externally.
            Should be reset to Size.Empty when the application is no longer drawing (or the background
            will not update properly).
            Note that this is the image dimensions, not the display dimensions. For display
            information, see DrawingRectangle, ZoomX, ZoomY.
            </summary>
        </member>
        <member name="P:Lumenera.VideoBox.DrawingRectangle">
            <summary>
            The drawing area relative to the VideoBox client area (which scales according to the 
            SizeMode and ZoomFactor). In combination with ImageSize, determines everything about 
            drawing the image and annotation on image overlays.
            See also DrawingOrigin, DrawingZoomX, DrawingZoomY.
            </summary>
        </member>
        <member name="P:Lumenera.VideoBox.DrawingOrigin">
            <summary>
            The drawing origin relative to the VideoBox client area. Typically used with
            DrawingZoomX and DrawingZoomY by application software to align drawing of image annotation
            with the iamge.
            </summary>
        </member>
        <member name="P:Lumenera.VideoBox.DrawingZoomX">
            <summary>
            The effective X zoom ratio for all SizeModes. The X and Y zoom ratio is the same for all
            SizeModes except StretchImage. Typically used with DrawingOrigin and DrawingZoomY by 
            application software to align drawing of image annotation with the iamge.
            </summary>
        </member>
        <member name="P:Lumenera.VideoBox.DrawingZoomY">
            <summary>
            The effective Y zoom ratio for all SizeModes. The X and Y zoom ratio is the same for all
            SizeModes except StretchImage. Typically used with DrawingOrigin and DrawingZoomX by 
            application software to align drawing of image annotation with the iamge.
            </summary>
        </member>
        <member name="T:Lumenera.BayerColorOffsets">
            <summary>
            Offsets for each of the 4 colors in a Bayer pattern. 
            </summary>
        </member>
        <member name="T:Lumenera.BayerPattern">
            <summary>
            Support for interpreting Bayer image data.
            Specifically, what is the color of the raw pixel at a specific image coordinate.
            </summary>
        </member>
        <member name="M:Lumenera.BayerPattern.#ctor(Lumenera.BayerPatternType,System.Int32,System.Int32)">
            <summary>
            Initialize a BayerPattern object for one of the 4 possible patterns for a subwindowed raw image.
            </summary>
            <param name="b">One of the four possible ImageBayerPatterns.</param>
            <param name="x">Location of the subwindow.</param>
            <param name="y">Location of the subwindow.</param>
        </member>
        <member name="M:Lumenera.BayerPattern.#ctor(Lumenera.BayerPatternType,Lumenera.Geometry.Point)">
            <summary>
            Initialize a BayerPattern object for one of the 4 possible patterns for a subwindowed raw image.
            </summary>
            <param name="b">One of the four possible ImageBayerPatterns.</param>
            <param name="p">Location of the subwindow.</param>
        </member>
        <member name="M:Lumenera.BayerPattern.#ctor(Lumenera.BayerPatternType)">
            <summary>
            Initialize a BayerPattern object for one of the 4 possible patterns.
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:Lumenera.BayerPattern.GetPattern(Lumenera.BayerColorOffsets)">
            <summary>
            Determine which of the 4 possible bayer patterns correspond to the specified BayerColorOffsets
            </summary>
            <param name="o">The BayerColorOffsets.</param>
            <returns>The Bayer pattern.</returns>
        </member>
        <member name="M:Lumenera.BayerPattern.GetColorOffsets(Lumenera.BayerPatternType)">
            <summary>
            Get the color offsets for each of the 4 colors in the bayer pattern associated with one of the 4 possible patterns.
            </summary>
            <param name="bayerPattern"></param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.BayerPattern.GetColorOffsets(Lumenera.BayerPatternType,System.Int32,System.Int32)">
            <summary>
            Get the color offsets for each of the 4 colors in the bayer pattern associated with one of the 4 possible patterns.
            </summary>
            <param name="bayerPattern"></param>
            <param name="x">Location of the subwindow.</param>
            <param name="y">Location of the subwindow.</param>
            <returns></returns>
        </member>
        <member name="M:Lumenera.LayeredWindowForm.PaintForm(System.Drawing.Bitmap)">
            <summary>
            Redraws the overlay when the origin or size of the overlay form changes. 
            For moves, just change the form's location.
            </summary>
            <param name="bmp">The Bitmap to apply onto the parent control</param>
        </member>
        <member name="P:Lumenera.LayeredWindowForm.CreateParams">
            <summary>
            Allows form to be transparent
            See http://msdn.microsoft.com/en-us/library/ms997507.aspx
            </summary>
        </member>
        <member name="P:Lumenera.IImageProcessingFunctionContainer.SubWindowOrigin">
            <summary>
            Location of the top, left pixel in the original camera raw image.
            </summary>
        </member>
        <member name="P:Lumenera.IImageProcessingFunctionContainer.SubWindowBayerPattern">
            <summary>
            Bayer pattern corresponding to the SubWindowOrigin.
            </summary>
        </member>
    </members>
</doc>
